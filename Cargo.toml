
[workspace]
members = [

  # Source Available
  "crates/dbt-test-primitives",
  "crates/dbt-agate",
  "crates/dbt-auth",
  "crates/dbt-cancel",
  "crates/dbt-common",
  "crates/dbt-cloud-api",
  "crates/dbt-init",
  "crates/dbt-error",
  "crates/dbt-frontend-common",
  "crates/dbt-jinja/minijinja",
  "crates/minijinja-typecheck-builtins",
  "crates/dbt-jinja/minijinja-contrib",
  "crates/dbt-dag",
  "crates/dbt-loader",
  "crates/dbt-test-containers",
  "crates/dbt-parser",
  "crates/dbt-schemas",
  "crates/dbt-telemetry",
  "crates/dbt-selector-parser",
  "crates/dbt-proc-macros",

  "crates/dbt-init",
  "crates/dbt-adapter-proc-macros",
  "crates/dbt-fusion-adapter",
  "crates/dbt-ident",
  "crates/dbt-jinja-utils",
  "crates/dbt-sa-cli",
  "crates/dbt-xdbc",
  "crates/dbt-deps",
  "crates/vortex-client",
  "crates/vortex-events",
  "crates/proto-rust",
  "crates/dbt-env",
  "crates/dbt-test-utils", 
  "crates/dbt-lint",
]

resolver = "2"

[workspace.package]
authors = ["dbt Labs <info@getdbt.com>"]
description = "Fusion: A fast dbt engine, SQL compiler, local development framework, and in-memory analytical database"
edition = "2024"
homepage = "https://getdbt.com"
keywords = ["sql", "parquet", "json", "csv", "dbt"]
license = "<>"
repository = "https://github.com/dbt-labs/dbt-fusion"
version = "2.0.0-preview.7"

# We currently need a fork of apache/arrow-datafusion with a few patches.
# However, note that we declare dependencies in our crates with the same version
# numbers as crates.io / the upstream repository.
# See https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#the-patch-section
[patch.crates-io]
datafusion = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
datafusion-common = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
datafusion-catalog = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
datafusion-expr = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
datafusion-functions = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
datafusion-functions-aggregate = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
datafusion-functions-nested = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
datafusion-functions-window = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
datafusion-physical-expr = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
datafusion-physical-plan = { git = "https://github.com/sdf-labs/datafusion", rev = "1d8fe1ebabbd0dbfe41d57b03fbf60bd49f5b354" } # @ sdf/45
# OR, when working locally
#datafusion = { path = "../datafusion/datafusion/core" }

# All arrow dependencies (run `cargo tree --prefix none | grep ^arrow | cut -d ' ' -f1 | sort -u` to get this list)
arrow = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-arith = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-array = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-buffer = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-cast = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-csv = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-data = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-ipc = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-json = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-ord = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-row = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-schema = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-select = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
arrow-string = { git = "https://github.com/sdf-labs/arrow-rs", rev = "ad6ab6fcf06156ae084de4d49625ca52c66b310f" } # @ sdf/54.2.1
# OR, when working locally
# arrow = { path = "../arrow-rs/arrow" }
# arrow-arith = { path = "../arrow-rs/arrow-arith" }
# arrow-array = { path = "../arrow-rs/arrow-array" }
# arrow-buffer = { path = "../arrow-rs/arrow-buffer" }
# arrow-cast = { path = "../arrow-rs/arrow-cast" }
# arrow-csv = { path = "../arrow-rs/arrow-csv" }
# arrow-data = { path = "../arrow-rs/arrow-data" }
# arrow-ipc = { path = "../arrow-rs/arrow-ipc" }
# arrow-json = { path = "../arrow-rs/arrow-json" }
# arrow-ord = { path = "../arrow-rs/arrow-ord" }
# arrow-row = { path = "../arrow-rs/arrow-row" }
# arrow-schema = { path = "../arrow-rs/arrow-schema" }
# arrow-select = { path = "../arrow-rs/arrow-select" }
# arrow-string = { path = "../arrow-rs/arrow-string" }

[profile.dev.package."*"]
# Enable basic optimizations for all non-member dependencies. This greatly
# speeds up test times, with no loss of debuggability.
opt-level = 1

[profile.dev.build-override]
# Some libraries (e.g. syn, proc-macro2 and all their dependencies) are compiled
# *for* the build, and also dependend by tests (because we have proc-macro crates).
# Tests compile with debug symbols enabled, otherwise debug symbols are disabled by default.
# Force debug symbols to be always enabled to increase cache reuse between `cargo xtask`
# and `cargo build/run --bin` invocations.
debug = true

# Release Profiles https://doc.rust-lang.org/book/ch14-01-release-profiles.html
# To run: cargo build --release
[profile.release]
opt-level = 3
# Link-time optimization: whole-program analysis (across crate boundaries etc.)
# during the link step. ThinLTO is drastically more efficient (in terms of
# build time and parallelism) than what one gets with "yes". See
# http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html
lto = "thin"
# Parallel compilation within a crate. See:
# https://doc.rust-lang.org/cargo/reference/profiles.html#codegen-units
codegen-units = 16

# Used for Linux builds. Symbols are extracted by the CI build script.
[profile.relwithdebinfo]
inherits = "release"
strip = false
debug = true

# Profile for CI runs
[profile.ci]
inherits = "dev"
opt-level = 3

[workspace.dependencies]
# These crates should be used by workspace members using `workspace = true`.
# We only want to specify the versions once.
# https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace


# fs source available dependencies
dbt-adapter-proc-macros = { path = "crates/dbt-adapter-proc-macros" }
dbt-agate = { path = "crates/dbt-agate" }
dbt-auth = { path = "crates/dbt-auth" }
dbt-cancel = { path = "crates/dbt-cancel" }
dbt-cloud-api = { path = "crates/dbt-cloud-api" }
dbt-common = { path = "crates/dbt-common" }
dbt-dag = { path = "crates/dbt-dag" }
dbt-deps = { path = "crates/dbt-deps" }
dbt-env = { path = "crates/dbt-env" }
dbt-error = { path = "crates/dbt-error" }
dbt-frontend-common = { path = "crates/dbt-frontend-common" }
dbt-fusion-adapter = { path = "crates/dbt-fusion-adapter" }
dbt-ident = { path = "crates/dbt-ident" }
dbt-init = { path = "crates/dbt-init" }
dbt-jinja-utils = { path = "crates/dbt-jinja-utils" }
dbt-lint = { path = "crates/dbt-lint" }
dbt-loader = { path = "crates/dbt-loader" }
dbt-parser = { path = "crates/dbt-parser" }
dbt-proc-macros = { path = "crates/dbt-proc-macros" }

dbt-schemas = { path = "crates/dbt-schemas" }
dbt-selector-parser = { path = "crates/dbt-selector-parser" }
dbt-telemetry = { path = "crates/dbt-telemetry" }
dbt-test-containers = { path = "crates/dbt-test-containers" }
dbt-test-primitives = { path = "crates/dbt-test-primitives" }
dbt-test-utils = { path = "crates/dbt-test-utils" }
proto-rust = { path = "crates/proto-rust" }
vortex-client = { path = "crates/vortex-client" }
vortex-events = { path = "crates/vortex-events" }


# jinja dependencies
minijinja-typecheck-builtins = { path = "crates/minijinja-typecheck-builtins" }

minijinja = { path = "crates/dbt-jinja/minijinja", features = [
  "loader",
  "custom_syntax",
] }
minijinja-contrib = { path = "crates/dbt-jinja/minijinja-contrib", features = [
  "pycompat",
  "datetime",
  "timezone",
  "rand",
  "unicode_wordwrap",
  "wordcount",
] }
# snowflake-rs fork:
snowflake-api = { path = "crates/snowflake-rs/snowflake-api" }

# serde
dbt-serde_yaml = { git = "https://github.com/sdf-labs/dbt-serde-yaml", rev = "f11cbb614c43ebe55e6deb473002e8190cf26171", features = [
  "filename",
  "schemars",
  "flatten_dunder",
] }
serde = { version = "1.0.147", default-features = false, features = ["derive"] }
serde_derive = "1.0.215"
serde_json = "1.0.133"
serde_repr = "0.1.20"
serde_with = "3.12.0"

toml = { version = "0.9.5" }

# cloud providers
aws-config = { version = "1.1.7", features = ["behavior-version-latest"] }
aws-sdk-s3 = "1.78.0"

# arrow + parquet
arrow = { version = "=54.2.1", features = ["prettyprint"] }
arrow-array = { version = "=54.2.1" }
arrow-buffer = { version = "=54.2.1" }
arrow-csv = { version = "=54.2.1" }
arrow-data = { version = "=54.2.1" }
arrow-ipc = { version = "=54.2.1" }
arrow-json = { version = "=54.2.1" }
arrow-schema = { version = "=54.2.1", features = ["serde"] }
parquet = { version = "=54.2.1" }
serde_arrow = { version = "0.13.4", features = ["arrow-54"] }

# xdbc
adbc-core = { git = "https://github.com/dbt-labs/arrow-adbc", package = "adbc_core", version = "0.20.0", rev = "34c0a6f7cd039334683bc0b05b9bc3430e0b7e86" } # @ apache-arrow-adbc-20-rust
adbc-driver-manager = { git = "https://github.com/dbt-labs/arrow-adbc", package = "adbc_driver_manager", version = "0.20.0", rev = "34c0a6f7cd039334683bc0b05b9bc3430e0b7e86", features = [
  "windows-sys",
  "windows-registry",
] } # @ apache-arrow-adbc-20-rust
dbt-xdbc = { path = "crates/dbt-xdbc" }

# antlr for frontend
antlr-rust = { git = "https://github.com/sdf-labs/antlr4", rev = "b8179d265532a5f2c901d702adcb4975e32b949c" }

# datafusion

# Note: the following line has been removed to discourage dependency on the
# `datafusion` (aka `datafusion-core`) crate: the `datafusion` crate is an
# aggregation crate that pulls in and re-exports symbols from the other, finer
# grained datafusion-xxx crates, while adding some APIs for the datafusion
# execution runtime. However, it builds much slower than the individual crates.
# Therefore, only a select few crates (specifically, those that have to interact
# with the datafusion runtime) should depend on the `datafusion` crate, for all
# other crates, you should prefer using the individual datafusion-xxx crates
# directly whenever possible.

# datafusion = { version = "45.0.0", default-features = false }
datafusion-catalog = { version = "45.0.0" }
datafusion-common = { version = "45.0.0", default-features = false, features = [
  "object_store",
  "parquet",
] }
datafusion-expr = { version = "45.0.0" }
datafusion-functions = { version = "45.0.0", default-features = false, features = [
  "core_expressions",
  "crypto_expressions",
  "datetime_expressions",
  "encoding_expressions",
  "math_expressions",
  "regex_expressions",
  "string_expressions",
  "unicode_expressions",
] }
datafusion-functions-aggregate = { version = "45.0.0" }
datafusion-functions-nested = { version = "45.0.0" }
datafusion-functions-window = { version = "45.0.0" }
datafusion-physical-expr = { version = "45.0.0" }
datafusion-physical-plan = { version = "45.0.0" }

# uuid
uuid = { version = "1.16.0", features = ["v4"] }

# networking & cache
redis = { version = "0.31.0", features = [
  "cluster",
  "cluster-async",
  "tls-rustls",
  "tls-rustls-insecure",
  "tokio-comp",
  "tokio-rustls-comp",
] }
rustls = { version = "0.23.27" }
rustls-platform-verifier = { version = "0.6", default-features = false }
# replace default-tls in default features with rustls-tls
reqwest = { version = "0.12.9", default-features = false, features = [
  "charset",
  "gzip",
  "http2",
  "rustls-tls",
  "macos-system-configuration",
] }
# latest version depended on by the version of reqwest-retry in use
gcloud-auth = { version = "1.1.1", default-features = false, features = [
  "rustls-tls",
] }
http = { version = "1.2.0", default-features = false }
reqwest-middleware = { version = "0.4.2" }
reqwest-retry = { version = "0.7.0" }
token-source = "1.0.0"
ureq = { version = "3.0.11", default-features = false, features = [
  "gzip",
  "json",
  "rustls",
  "platform-verifier",
] }

# lazy static
lazy_static = "1.4"

# type derived macros
enum-map = "2.7.3"
int-enum = "1.1"
strum = "0.27.2"
strum_macros = "0.27.2"

# macros
paste = "1.0.15"
scopeguard = { version = "1.2.0" }

# io stuff
console = "0.15.5"
csv = { version = "1.1", default-features = false }
dialoguer = "0.11.0"
dirs = "5.0.1"
flate2 = "1.0.28"
gix = { version = "0.72.1", default-features = false, features = ["revision"] }
gix-discover = "0.40.1"
glob = "0.3.2"
ignore = "0.4.23"
num_cpus = "1.16.0"
pathdiff = "0.2.3"
run_script = "0.11.0"
rust-embed = { version = "8.5.0" }
schemars = "0.8.22"
shellexpand = "3.1.1"
stringmetrics = "2.2.2"
tar = "0.4.40"
tempfile = "3.2.0"
term_size = "0.3.1"
walkdir = "2.4.0"
xshell = "0.2.7"

# async + threading
async-trait = "0.1.83"
crossbeam-queue = "0.3.12"
crossbeam-skiplist = "0.1.3"
futures = "0.3.31"
futures-core = "0.3"
futures-lite = "2.0"
futures-util = "0.3"
once_cell = "1.18"
parking_lot = { version = "0.12.3" }
tokio = { version = "1.41.1", features = [
  "fs",
  "io-util",
  "macros",
  "net",
  "process",
  "rt-multi-thread",
  "signal",
  "sync",
  "time",
] }

# atomic
arc-swap = { version = "1.7.1" }

# pretty
comfy-table = { version = "7.1.1" }
indicatif = { version = "0.17.11" }

# repl
rustyline = { version = "15.0.0", default-features = false, features = [
  "derive",
] }

# datatypes and algos
base64 = "0.22.1"
bigdecimal = "0.4.7"
blake3 = "1.5.0"
chrono = { version = "0.4.31", features = ["std", "clock", "serde"] }
chrono-tz = { version = "0.10" }
clap = { version = "4.4.4", features = ["derive"] }
counter = "0.6.0"
dashmap = "6.1.0"
fancy-regex = "0.14.0"
hex = { version = "0.4.3" }
humantime = "2.1.0"
iana-time-zone = { version = "0.1.10" }
im = "15.1.0"
indexmap = "2.2.3"
ini = "1.3.0"
itertools = "0.13.0"
linked-hash-map = "0.5.6"
linked_hash_set = "0.1.4"
md5 = "0.7.0"
petgraph = "0.8.1"
pkcs8 = { version = "0.10", features = ["pkcs5"] }
rand = "0.9.0"
regex = "1.11.1"
rsa = "0.9"
rust-lapper = "1.1.0"
sha2 = "0.10.8"
similar = "2.6"
siphasher = { version = "1.0.1" }
url = "2.5.4"
ustr = "1.0.0"
zstd-safe = "7"

# testing
difference = "2.0.0"
fake = { version = "4.4.0", features = ["derive", "uuid", "time"] }
goldie = "0.5.0"
indoc = "2.0.6"
merge = { version = "0.2.0" }
mock_instant = "0.5.3"
mockito = "1.2"
pretty_assertions = { version = "1.4.1" }
sqllogictest = "0.26.0"

# protobuf
bytes = "1.10.1"
pbjson = "0.8.0"
pbjson-build = "0.8.0"
pbjson-types = "0.8.0"
prost = "0.14"
prost-build = "0.14"
prost-types = "0.14"

# jsonschema
jsonschema-valid = "0.5.2"

# phf
phf = { version = "0.11" }
phf_shared = { version = "0.11" }

# error handling
anyhow = { version = "1.0.74" }
thiserror = "1.0"

# database / orms
sea-orm = { version = "~1.1.13", features = [
  "sqlx-postgres",
  "runtime-async-std-native-tls",
  "macros",
] }
sqlx = { version = "0.8", features = ["postgres", "runtime-tokio-native-tls"] }

# logging
env_logger = "0.10" # To be removed
log = { version = "0.4.27", features = ["kv_serde"] }

# tracing (observability)
tracing = "0.1.41"
tracing-log = "0.2.0" # temporary until we migrate to tracing exclusively
tracing-subscriber = { version = "0.3.19", features = ["env-filter", "json"] }

# OpenTelemetry (optional embedded OTLP exporter for traces, see dbt-common)
opentelemetry = "0.30.0"
opentelemetry-otlp = "0.30.0"
opentelemetry-semantic-conventions = "0.30.0"
opentelemetry_sdk = "0.30.0"

# tracing (local profiling)
# Compile with --features "tracy-client/enable" to enable integration with the
# Tracy profiler: https://github.com/wolfpld/tracy
tracy-client = { version = "0.18.0", default-features = false }

[workspace.lints.rust]
# When updating these lints mind that some crates may not inherit form workspace
# Use only "warn" in this section. CI run will turn these into deny,
# and we don't want to disallow local compilation of "dirty" code.
unused_qualifications = "warn"
#unused_crate_dependencies = "warn"
