// This file is @generated by prost-build.
/// Event emitted when an artifact is written to disk.
#[derive(crate::macros::ProtoNew)]
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[::serde_with::skip_serializing_none]
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ArtifactWritten {
    /// The path to the artifact relative to the project root.
    #[prost(string, tag = "1")]
    pub relative_path: ::prost::alloc::string::String,
    /// Type of the artifact written.
    #[prost(enumeration = "ArtifactType", tag = "2")]
    #[serde(
        serialize_with = "ArtifactType::serialize",
        deserialize_with = "ArtifactType::deserialize"
    )]
    #[cfg_attr(
        any(test, feature = "test-utils"),
        dummy(expr = "::fake::Fake::fake::<ArtifactType>(&::fake::Faker) as i32")
    )]
    pub artifact_type: i32,
}
impl crate::StaticName for ArtifactWritten {
    const FULL_NAME: &'static str = "v1.public.events.fusion.artifact.ArtifactWritten";
    const TYPE_URL: &'static str = "/v1.public.events.fusion.artifact.ArtifactWritten";
}
impl ::prost::Name for ArtifactWritten {
    const NAME: &'static str = "ArtifactWritten";
    const PACKAGE: &'static str = "v1.public.events.fusion.artifact";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.events.fusion.artifact.ArtifactWritten".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.events.fusion.artifact.ArtifactWritten".into()
    }
}
/// Known artifact types written by dbt
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[derive(crate::macros::ProtoEnumSerde)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ArtifactType {
    Unspecified = 0,
    Manifest = 1,
    SemanticManifest = 2,
    Catalog = 3,
}
impl ArtifactType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ARTIFACT_TYPE_UNSPECIFIED",
            Self::Manifest => "ARTIFACT_TYPE_MANIFEST",
            Self::SemanticManifest => "ARTIFACT_TYPE_SEMANTIC_MANIFEST",
            Self::Catalog => "ARTIFACT_TYPE_CATALOG",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ARTIFACT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ARTIFACT_TYPE_MANIFEST" => Some(Self::Manifest),
            "ARTIFACT_TYPE_SEMANTIC_MANIFEST" => Some(Self::SemanticManifest),
            "ARTIFACT_TYPE_CATALOG" => Some(Self::Catalog),
            _ => None,
        }
    }
}
