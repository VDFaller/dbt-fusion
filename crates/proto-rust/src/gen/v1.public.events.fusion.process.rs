// This file is @generated by prost-build.
/// Process-wide attributes for a telemetry-emitting process.
#[derive(crate::macros::ProtoNew)]
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[::serde_with::skip_serializing_none]
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Process {
    /// Name of the emitting package, e.g. "dbt" or "dbt-lsp".
    #[prost(string, tag = "3")]
    pub package: ::prost::alloc::string::String,
    /// Version of the emitting package, e.g. "v2.0.0".
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
    /// Host operating system, e.g. "linux", "darwin", "windows".
    #[prost(string, tag = "5")]
    pub host_os: ::prost::alloc::string::String,
    /// Host architecture, e.g. "x86_64", "aarch64".
    #[prost(string, tag = "6")]
    pub host_arch: ::prost::alloc::string::String,
}
impl crate::StaticName for Process {
    const FULL_NAME: &'static str = "v1.public.events.fusion.process.Process";
    const TYPE_URL: &'static str = "/v1.public.events.fusion.process.Process";
}
impl ::prost::Name for Process {
    const NAME: &'static str = "Process";
    const PACKAGE: &'static str = "v1.public.events.fusion.process";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.events.fusion.process.Process".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.events.fusion.process.Process".into()
    }
}
