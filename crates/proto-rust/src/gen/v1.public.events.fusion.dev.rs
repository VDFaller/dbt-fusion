// This file is @generated by prost-build.
/// General debug value holder for developer spans.
#[derive(crate::macros::ProtoNew)]
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(transparent)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DebugValue {
    #[prost(oneof = "debug_value::Value", tags = "1, 4, 5, 6")]
    pub value: ::core::option::Option<debug_value::Value>,
}
/// Nested message and enum types in `DebugValue`.
pub mod debug_value {
    #[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
    #[derive(::serde::Serialize, ::serde::Deserialize)]
    #[serde(untagged)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(double, tag = "1")]
        Float64(f64),
        #[prost(bool, tag = "4")]
        Bool(bool),
        #[prost(string, tag = "5")]
        String(::prost::alloc::string::String),
        #[prost(bytes, tag = "6")]
        Bytes(::prost::alloc::vec::Vec<u8>),
    }
}
impl crate::StaticName for DebugValue {
    const FULL_NAME: &'static str = "v1.public.events.fusion.dev.DebugValue";
    const TYPE_URL: &'static str = "/v1.public.events.fusion.dev.DebugValue";
}
impl ::prost::Name for DebugValue {
    const NAME: &'static str = "DebugValue";
    const PACKAGE: &'static str = "v1.public.events.fusion.dev";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.events.fusion.dev.DebugValue".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.events.fusion.dev.DebugValue".into()
    }
}
/// Special event emitted only at TRACE level, and disabled by default.
/// Used for troubleshooting complex bugs in Fusion itself.
#[derive(crate::macros::ProtoNew)]
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[::serde_with::skip_serializing_none]
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallTrace {
    /// Internal developer span name, often a function/method.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// File name where the span was created.
    #[prost(string, optional, tag = "2")]
    pub file: ::core::option::Option<::prost::alloc::string::String>,
    /// Line number in the file where the span was created.
    #[prost(uint32, optional, tag = "3")]
    pub line: ::core::option::Option<u32>,
    /// Arbitrary extra structured data.
    #[prost(btree_map = "string, message", tag = "4")]
    pub extra: ::prost::alloc::collections::BTreeMap<
        ::prost::alloc::string::String,
        DebugValue,
    >,
}
impl crate::StaticName for CallTrace {
    const FULL_NAME: &'static str = "v1.public.events.fusion.dev.CallTrace";
    const TYPE_URL: &'static str = "/v1.public.events.fusion.dev.CallTrace";
}
impl ::prost::Name for CallTrace {
    const NAME: &'static str = "CallTrace";
    const PACKAGE: &'static str = "v1.public.events.fusion.dev";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.events.fusion.dev.CallTrace".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.events.fusion.dev.CallTrace".into()
    }
}
/// Unknown span placeholder used as a fallback. Presence of this
/// event in the stream indicates a bug in the telemetry instrumentation.
#[derive(crate::macros::ProtoNew)]
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[::serde_with::skip_serializing_none]
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Unknown {
    /// Inferred name, often a function/method.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// File name where the span was created.
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
    /// Line number in the file where the span was created.
    #[prost(uint32, tag = "3")]
    pub line: u32,
}
impl crate::StaticName for Unknown {
    const FULL_NAME: &'static str = "v1.public.events.fusion.dev.Unknown";
    const TYPE_URL: &'static str = "/v1.public.events.fusion.dev.Unknown";
}
impl ::prost::Name for Unknown {
    const NAME: &'static str = "Unknown";
    const PACKAGE: &'static str = "v1.public.events.fusion.dev";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.events.fusion.dev.Unknown".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.events.fusion.dev.Unknown".into()
    }
}
