// This file is @generated by prost-build.
/// Common event info
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterCommonEventInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub level: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub invocation_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "6")]
    pub pid: i32,
    #[prost(string, tag = "7")]
    pub thread: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub ts: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(map = "string, string", tag = "9")]
    pub extra: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "10")]
    pub category: ::prost::alloc::string::String,
}
impl ::prost::Name for AdapterCommonEventInfo {
    const NAME: &'static str = "AdapterCommonEventInfo";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterCommonEventInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterCommonEventInfo".into()
    }
}
/// AdapterNodeRelation
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AdapterNodeRelation {
    #[prost(string, tag = "10")]
    pub database: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub alias: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub relation_name: ::prost::alloc::string::String,
}
impl ::prost::Name for AdapterNodeRelation {
    const NAME: &'static str = "AdapterNodeRelation";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterNodeRelation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterNodeRelation".into()
    }
}
/// NodeInfo
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterNodeInfo {
    #[prost(string, tag = "1")]
    pub node_path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub node_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub resource_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub materialized: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub node_status: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub node_started_at: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub node_finished_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub meta: ::core::option::Option<::pbjson_types::Struct>,
    #[prost(message, optional, tag = "10")]
    pub node_relation: ::core::option::Option<AdapterNodeRelation>,
    #[prost(string, tag = "11")]
    pub node_checksum: ::prost::alloc::string::String,
}
impl ::prost::Name for AdapterNodeInfo {
    const NAME: &'static str = "AdapterNodeInfo";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterNodeInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterNodeInfo".into()
    }
}
/// ReferenceKey
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ReferenceKeyMsg {
    #[prost(string, tag = "1")]
    pub database: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub identifier: ::prost::alloc::string::String,
}
impl ::prost::Name for ReferenceKeyMsg {
    const NAME: &'static str = "ReferenceKeyMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ReferenceKeyMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ReferenceKeyMsg".into()
    }
}
/// D005
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AdapterDeprecationWarning {
    #[prost(string, tag = "1")]
    pub old_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_name: ::prost::alloc::string::String,
}
impl ::prost::Name for AdapterDeprecationWarning {
    const NAME: &'static str = "AdapterDeprecationWarning";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterDeprecationWarning".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterDeprecationWarning".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterDeprecationWarningMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AdapterDeprecationWarning>,
}
impl ::prost::Name for AdapterDeprecationWarningMsg {
    const NAME: &'static str = "AdapterDeprecationWarningMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterDeprecationWarningMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterDeprecationWarningMsg".into()
    }
}
/// D012
#[derive(::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CollectFreshnessReturnSignature {}
impl ::prost::Name for CollectFreshnessReturnSignature {
    const NAME: &'static str = "CollectFreshnessReturnSignature";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CollectFreshnessReturnSignature".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CollectFreshnessReturnSignature".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectFreshnessReturnSignatureMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CollectFreshnessReturnSignature>,
}
impl ::prost::Name for CollectFreshnessReturnSignatureMsg {
    const NAME: &'static str = "CollectFreshnessReturnSignatureMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CollectFreshnessReturnSignatureMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CollectFreshnessReturnSignatureMsg".into()
    }
}
/// E001
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterEventDebug {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub base_msg: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub args: ::core::option::Option<::pbjson_types::ListValue>,
}
impl ::prost::Name for AdapterEventDebug {
    const NAME: &'static str = "AdapterEventDebug";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterEventDebug".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterEventDebug".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterEventDebugMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AdapterEventDebug>,
}
impl ::prost::Name for AdapterEventDebugMsg {
    const NAME: &'static str = "AdapterEventDebugMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterEventDebugMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterEventDebugMsg".into()
    }
}
/// E002
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterEventInfo {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub base_msg: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub args: ::core::option::Option<::pbjson_types::ListValue>,
}
impl ::prost::Name for AdapterEventInfo {
    const NAME: &'static str = "AdapterEventInfo";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterEventInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterEventInfo".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterEventInfoMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AdapterEventInfo>,
}
impl ::prost::Name for AdapterEventInfoMsg {
    const NAME: &'static str = "AdapterEventInfoMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterEventInfoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterEventInfoMsg".into()
    }
}
/// E003
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterEventWarning {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub base_msg: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub args: ::core::option::Option<::pbjson_types::ListValue>,
}
impl ::prost::Name for AdapterEventWarning {
    const NAME: &'static str = "AdapterEventWarning";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterEventWarning".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterEventWarning".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterEventWarningMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AdapterEventWarning>,
}
impl ::prost::Name for AdapterEventWarningMsg {
    const NAME: &'static str = "AdapterEventWarningMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterEventWarningMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterEventWarningMsg".into()
    }
}
/// E004
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterEventError {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub base_msg: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub args: ::core::option::Option<::pbjson_types::ListValue>,
    #[prost(string, tag = "5")]
    pub exc_info: ::prost::alloc::string::String,
}
impl ::prost::Name for AdapterEventError {
    const NAME: &'static str = "AdapterEventError";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterEventError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterEventError".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterEventErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AdapterEventError>,
}
impl ::prost::Name for AdapterEventErrorMsg {
    const NAME: &'static str = "AdapterEventErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterEventErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterEventErrorMsg".into()
    }
}
/// E005
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewConnection {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub conn_type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for NewConnection {
    const NAME: &'static str = "NewConnection";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.NewConnection".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.NewConnection".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewConnectionMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NewConnection>,
}
impl ::prost::Name for NewConnectionMsg {
    const NAME: &'static str = "NewConnectionMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.NewConnectionMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.NewConnectionMsg".into()
    }
}
/// E006
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConnectionReused {
    #[prost(string, tag = "1")]
    pub conn_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub orig_conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for ConnectionReused {
    const NAME: &'static str = "ConnectionReused";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionReused".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionReused".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionReusedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConnectionReused>,
}
impl ::prost::Name for ConnectionReusedMsg {
    const NAME: &'static str = "ConnectionReusedMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionReusedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionReusedMsg".into()
    }
}
/// E007
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConnectionLeftOpenInCleanup {
    #[prost(string, tag = "1")]
    pub conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for ConnectionLeftOpenInCleanup {
    const NAME: &'static str = "ConnectionLeftOpenInCleanup";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionLeftOpenInCleanup".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionLeftOpenInCleanup".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionLeftOpenInCleanupMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConnectionLeftOpenInCleanup>,
}
impl ::prost::Name for ConnectionLeftOpenInCleanupMsg {
    const NAME: &'static str = "ConnectionLeftOpenInCleanupMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionLeftOpenInCleanupMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionLeftOpenInCleanupMsg".into()
    }
}
/// E008
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConnectionClosedInCleanup {
    #[prost(string, tag = "1")]
    pub conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for ConnectionClosedInCleanup {
    const NAME: &'static str = "ConnectionClosedInCleanup";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionClosedInCleanup".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionClosedInCleanup".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionClosedInCleanupMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConnectionClosedInCleanup>,
}
impl ::prost::Name for ConnectionClosedInCleanupMsg {
    const NAME: &'static str = "ConnectionClosedInCleanupMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionClosedInCleanupMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionClosedInCleanupMsg".into()
    }
}
/// E009
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RollbackFailed {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub conn_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub exc_info: ::prost::alloc::string::String,
}
impl ::prost::Name for RollbackFailed {
    const NAME: &'static str = "RollbackFailed";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.RollbackFailed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.RollbackFailed".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RollbackFailedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RollbackFailed>,
}
impl ::prost::Name for RollbackFailedMsg {
    const NAME: &'static str = "RollbackFailedMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.RollbackFailedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.RollbackFailedMsg".into()
    }
}
/// E010
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionClosed {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for ConnectionClosed {
    const NAME: &'static str = "ConnectionClosed";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionClosed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionClosed".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionClosedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConnectionClosed>,
}
impl ::prost::Name for ConnectionClosedMsg {
    const NAME: &'static str = "ConnectionClosedMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionClosedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionClosedMsg".into()
    }
}
/// E011
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionLeftOpen {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for ConnectionLeftOpen {
    const NAME: &'static str = "ConnectionLeftOpen";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionLeftOpen".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionLeftOpen".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionLeftOpenMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConnectionLeftOpen>,
}
impl ::prost::Name for ConnectionLeftOpenMsg {
    const NAME: &'static str = "ConnectionLeftOpenMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionLeftOpenMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionLeftOpenMsg".into()
    }
}
/// E012
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rollback {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for Rollback {
    const NAME: &'static str = "Rollback";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.Rollback".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.Rollback".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RollbackMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<Rollback>,
}
impl ::prost::Name for RollbackMsg {
    const NAME: &'static str = "RollbackMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.RollbackMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.RollbackMsg".into()
    }
}
/// E013
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CacheMiss {
    #[prost(string, tag = "1")]
    pub conn_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub database: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub schema: ::prost::alloc::string::String,
}
impl ::prost::Name for CacheMiss {
    const NAME: &'static str = "CacheMiss";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CacheMiss".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CacheMiss".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheMissMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CacheMiss>,
}
impl ::prost::Name for CacheMissMsg {
    const NAME: &'static str = "CacheMissMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CacheMissMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CacheMissMsg".into()
    }
}
/// E014
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRelations {
    #[prost(string, tag = "1")]
    pub database: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub schema: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub relations: ::prost::alloc::vec::Vec<ReferenceKeyMsg>,
}
impl ::prost::Name for ListRelations {
    const NAME: &'static str = "ListRelations";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ListRelations".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ListRelations".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRelationsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ListRelations>,
}
impl ::prost::Name for ListRelationsMsg {
    const NAME: &'static str = "ListRelationsMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ListRelationsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ListRelationsMsg".into()
    }
}
/// E015
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionUsed {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub conn_type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for ConnectionUsed {
    const NAME: &'static str = "ConnectionUsed";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionUsed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionUsed".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectionUsedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConnectionUsed>,
}
impl ::prost::Name for ConnectionUsedMsg {
    const NAME: &'static str = "ConnectionUsedMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConnectionUsedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConnectionUsedMsg".into()
    }
}
/// E016
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlQuery {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub conn_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub sql: ::prost::alloc::string::String,
}
impl ::prost::Name for SqlQuery {
    const NAME: &'static str = "SQLQuery";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SQLQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SQLQuery".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlQueryMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SqlQuery>,
}
impl ::prost::Name for SqlQueryMsg {
    const NAME: &'static str = "SQLQueryMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SQLQueryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SQLQueryMsg".into()
    }
}
/// E017
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlQueryStatus {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(float, tag = "3")]
    pub elapsed: f32,
    #[prost(string, tag = "4")]
    pub query_id: ::prost::alloc::string::String,
}
impl ::prost::Name for SqlQueryStatus {
    const NAME: &'static str = "SQLQueryStatus";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SQLQueryStatus".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SQLQueryStatus".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlQueryStatusMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SqlQueryStatus>,
}
impl ::prost::Name for SqlQueryStatusMsg {
    const NAME: &'static str = "SQLQueryStatusMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SQLQueryStatusMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SQLQueryStatusMsg".into()
    }
}
/// E018
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlCommit {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for SqlCommit {
    const NAME: &'static str = "SQLCommit";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SQLCommit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SQLCommit".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlCommitMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SqlCommit>,
}
impl ::prost::Name for SqlCommitMsg {
    const NAME: &'static str = "SQLCommitMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SQLCommitMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SQLCommitMsg".into()
    }
}
/// E019
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ColTypeChange {
    #[prost(string, tag = "1")]
    pub orig_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub table: ::core::option::Option<ReferenceKeyMsg>,
}
impl ::prost::Name for ColTypeChange {
    const NAME: &'static str = "ColTypeChange";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ColTypeChange".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ColTypeChange".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ColTypeChangeMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ColTypeChange>,
}
impl ::prost::Name for ColTypeChangeMsg {
    const NAME: &'static str = "ColTypeChangeMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ColTypeChangeMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ColTypeChangeMsg".into()
    }
}
/// E020
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SchemaCreation {
    #[prost(message, optional, tag = "1")]
    pub relation: ::core::option::Option<ReferenceKeyMsg>,
}
impl ::prost::Name for SchemaCreation {
    const NAME: &'static str = "SchemaCreation";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SchemaCreation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SchemaCreation".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SchemaCreationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SchemaCreation>,
}
impl ::prost::Name for SchemaCreationMsg {
    const NAME: &'static str = "SchemaCreationMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SchemaCreationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SchemaCreationMsg".into()
    }
}
/// E021
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SchemaDrop {
    #[prost(message, optional, tag = "1")]
    pub relation: ::core::option::Option<ReferenceKeyMsg>,
}
impl ::prost::Name for SchemaDrop {
    const NAME: &'static str = "SchemaDrop";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SchemaDrop".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SchemaDrop".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SchemaDropMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SchemaDrop>,
}
impl ::prost::Name for SchemaDropMsg {
    const NAME: &'static str = "SchemaDropMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.SchemaDropMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.SchemaDropMsg".into()
    }
}
/// E022
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheAction {
    #[prost(string, tag = "1")]
    pub action: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub ref_key: ::core::option::Option<ReferenceKeyMsg>,
    #[prost(message, optional, tag = "3")]
    pub ref_key_2: ::core::option::Option<ReferenceKeyMsg>,
    #[prost(message, optional, tag = "4")]
    pub ref_key_3: ::core::option::Option<ReferenceKeyMsg>,
    #[prost(message, repeated, tag = "5")]
    pub ref_list: ::prost::alloc::vec::Vec<ReferenceKeyMsg>,
}
impl ::prost::Name for CacheAction {
    const NAME: &'static str = "CacheAction";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CacheAction".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CacheAction".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheActionMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CacheAction>,
}
impl ::prost::Name for CacheActionMsg {
    const NAME: &'static str = "CacheActionMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CacheActionMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CacheActionMsg".into()
    }
}
/// E031
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheDumpGraph {
    #[prost(map = "string, string", tag = "1")]
    pub dump: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "2")]
    pub before_after: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub action: ::prost::alloc::string::String,
}
impl ::prost::Name for CacheDumpGraph {
    const NAME: &'static str = "CacheDumpGraph";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CacheDumpGraph".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CacheDumpGraph".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheDumpGraphMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CacheDumpGraph>,
}
impl ::prost::Name for CacheDumpGraphMsg {
    const NAME: &'static str = "CacheDumpGraphMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CacheDumpGraphMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CacheDumpGraphMsg".into()
    }
}
/// E034
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AdapterRegistered {
    #[prost(string, tag = "1")]
    pub adapter_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub adapter_version: ::prost::alloc::string::String,
}
impl ::prost::Name for AdapterRegistered {
    const NAME: &'static str = "AdapterRegistered";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterRegistered".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterRegistered".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterRegisteredMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AdapterRegistered>,
}
impl ::prost::Name for AdapterRegisteredMsg {
    const NAME: &'static str = "AdapterRegisteredMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterRegisteredMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterRegisteredMsg".into()
    }
}
/// E035
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AdapterImportError {
    #[prost(string, tag = "1")]
    pub exc: ::prost::alloc::string::String,
}
impl ::prost::Name for AdapterImportError {
    const NAME: &'static str = "AdapterImportError";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterImportError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterImportError".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdapterImportErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AdapterImportError>,
}
impl ::prost::Name for AdapterImportErrorMsg {
    const NAME: &'static str = "AdapterImportErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.AdapterImportErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.AdapterImportErrorMsg".into()
    }
}
/// E036
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PluginLoadError {
    #[prost(string, tag = "1")]
    pub exc_info: ::prost::alloc::string::String,
}
impl ::prost::Name for PluginLoadError {
    const NAME: &'static str = "PluginLoadError";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.PluginLoadError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.PluginLoadError".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PluginLoadErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PluginLoadError>,
}
impl ::prost::Name for PluginLoadErrorMsg {
    const NAME: &'static str = "PluginLoadErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.PluginLoadErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.PluginLoadErrorMsg".into()
    }
}
/// E037
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewConnectionOpening {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<AdapterNodeInfo>,
    #[prost(string, tag = "2")]
    pub connection_state: ::prost::alloc::string::String,
}
impl ::prost::Name for NewConnectionOpening {
    const NAME: &'static str = "NewConnectionOpening";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.NewConnectionOpening".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.NewConnectionOpening".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewConnectionOpeningMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NewConnectionOpening>,
}
impl ::prost::Name for NewConnectionOpeningMsg {
    const NAME: &'static str = "NewConnectionOpeningMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.NewConnectionOpeningMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.NewConnectionOpeningMsg".into()
    }
}
/// E038
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CodeExecution {
    #[prost(string, tag = "1")]
    pub conn_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub code_content: ::prost::alloc::string::String,
}
impl ::prost::Name for CodeExecution {
    const NAME: &'static str = "CodeExecution";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CodeExecution".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CodeExecution".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CodeExecutionMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CodeExecution>,
}
impl ::prost::Name for CodeExecutionMsg {
    const NAME: &'static str = "CodeExecutionMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CodeExecutionMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CodeExecutionMsg".into()
    }
}
/// E039
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CodeExecutionStatus {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub elapsed: f32,
}
impl ::prost::Name for CodeExecutionStatus {
    const NAME: &'static str = "CodeExecutionStatus";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CodeExecutionStatus".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CodeExecutionStatus".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CodeExecutionStatusMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CodeExecutionStatus>,
}
impl ::prost::Name for CodeExecutionStatusMsg {
    const NAME: &'static str = "CodeExecutionStatusMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CodeExecutionStatusMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CodeExecutionStatusMsg".into()
    }
}
/// E040
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CatalogGenerationError {
    #[prost(string, tag = "1")]
    pub exc: ::prost::alloc::string::String,
}
impl ::prost::Name for CatalogGenerationError {
    const NAME: &'static str = "CatalogGenerationError";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CatalogGenerationError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CatalogGenerationError".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CatalogGenerationErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CatalogGenerationError>,
}
impl ::prost::Name for CatalogGenerationErrorMsg {
    const NAME: &'static str = "CatalogGenerationErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CatalogGenerationErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CatalogGenerationErrorMsg".into()
    }
}
/// E041
#[derive(::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WriteCatalogFailure {
    #[prost(int32, tag = "1")]
    pub num_exceptions: i32,
}
impl ::prost::Name for WriteCatalogFailure {
    const NAME: &'static str = "WriteCatalogFailure";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.WriteCatalogFailure".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.WriteCatalogFailure".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteCatalogFailureMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<WriteCatalogFailure>,
}
impl ::prost::Name for WriteCatalogFailureMsg {
    const NAME: &'static str = "WriteCatalogFailureMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.WriteCatalogFailureMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.WriteCatalogFailureMsg".into()
    }
}
/// E042
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CatalogWritten {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for CatalogWritten {
    const NAME: &'static str = "CatalogWritten";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CatalogWritten".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CatalogWritten".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CatalogWrittenMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CatalogWritten>,
}
impl ::prost::Name for CatalogWrittenMsg {
    const NAME: &'static str = "CatalogWrittenMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CatalogWrittenMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CatalogWrittenMsg".into()
    }
}
/// E043
#[derive(::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CannotGenerateDocs {}
impl ::prost::Name for CannotGenerateDocs {
    const NAME: &'static str = "CannotGenerateDocs";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CannotGenerateDocs".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CannotGenerateDocs".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CannotGenerateDocsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CannotGenerateDocs>,
}
impl ::prost::Name for CannotGenerateDocsMsg {
    const NAME: &'static str = "CannotGenerateDocsMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.CannotGenerateDocsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.CannotGenerateDocsMsg".into()
    }
}
/// E044
#[derive(::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BuildingCatalog {}
impl ::prost::Name for BuildingCatalog {
    const NAME: &'static str = "BuildingCatalog";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.BuildingCatalog".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.BuildingCatalog".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuildingCatalogMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<BuildingCatalog>,
}
impl ::prost::Name for BuildingCatalogMsg {
    const NAME: &'static str = "BuildingCatalogMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.BuildingCatalogMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.BuildingCatalogMsg".into()
    }
}
/// E045
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DatabaseErrorRunningHook {
    #[prost(string, tag = "1")]
    pub hook_type: ::prost::alloc::string::String,
}
impl ::prost::Name for DatabaseErrorRunningHook {
    const NAME: &'static str = "DatabaseErrorRunningHook";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.DatabaseErrorRunningHook".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.DatabaseErrorRunningHook".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatabaseErrorRunningHookMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DatabaseErrorRunningHook>,
}
impl ::prost::Name for DatabaseErrorRunningHookMsg {
    const NAME: &'static str = "DatabaseErrorRunningHookMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.DatabaseErrorRunningHookMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.DatabaseErrorRunningHookMsg".into()
    }
}
/// E046
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct HooksRunning {
    #[prost(int32, tag = "1")]
    pub num_hooks: i32,
    #[prost(string, tag = "2")]
    pub hook_type: ::prost::alloc::string::String,
}
impl ::prost::Name for HooksRunning {
    const NAME: &'static str = "HooksRunning";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.HooksRunning".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.HooksRunning".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HooksRunningMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<HooksRunning>,
}
impl ::prost::Name for HooksRunningMsg {
    const NAME: &'static str = "HooksRunningMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.HooksRunningMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.HooksRunningMsg".into()
    }
}
/// E047
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishedRunningStats {
    #[prost(string, tag = "1")]
    pub stat_line: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub execution: ::prost::alloc::string::String,
    #[prost(float, tag = "3")]
    pub execution_time: f32,
}
impl ::prost::Name for FinishedRunningStats {
    const NAME: &'static str = "FinishedRunningStats";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.FinishedRunningStats".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.FinishedRunningStats".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishedRunningStatsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<FinishedRunningStats>,
}
impl ::prost::Name for FinishedRunningStatsMsg {
    const NAME: &'static str = "FinishedRunningStatsMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.FinishedRunningStatsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.FinishedRunningStatsMsg".into()
    }
}
/// E048
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConstraintNotEnforced {
    #[prost(string, tag = "1")]
    pub constraint: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub adapter: ::prost::alloc::string::String,
}
impl ::prost::Name for ConstraintNotEnforced {
    const NAME: &'static str = "ConstraintNotEnforced";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConstraintNotEnforced".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConstraintNotEnforced".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConstraintNotEnforcedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConstraintNotEnforced>,
}
impl ::prost::Name for ConstraintNotEnforcedMsg {
    const NAME: &'static str = "ConstraintNotEnforcedMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConstraintNotEnforcedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConstraintNotEnforcedMsg".into()
    }
}
/// E049
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConstraintNotSupported {
    #[prost(string, tag = "1")]
    pub constraint: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub adapter: ::prost::alloc::string::String,
}
impl ::prost::Name for ConstraintNotSupported {
    const NAME: &'static str = "ConstraintNotSupported";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConstraintNotSupported".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConstraintNotSupported".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConstraintNotSupportedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConstraintNotSupported>,
}
impl ::prost::Name for ConstraintNotSupportedMsg {
    const NAME: &'static str = "ConstraintNotSupportedMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.ConstraintNotSupportedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.ConstraintNotSupportedMsg".into()
    }
}
/// E050
#[derive(::serde::Serialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TypeCodeNotFound {
    #[prost(int32, tag = "1")]
    pub type_code: i32,
}
impl ::prost::Name for TypeCodeNotFound {
    const NAME: &'static str = "TypeCodeNotFound";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.TypeCodeNotFound".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.TypeCodeNotFound".into()
    }
}
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TypeCodeNotFoundMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<AdapterCommonEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<TypeCodeNotFound>,
}
impl ::prost::Name for TypeCodeNotFoundMsg {
    const NAME: &'static str = "TypeCodeNotFoundMsg";
    const PACKAGE: &'static str = "v1.public.fields.adapter_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.adapter_types.TypeCodeNotFoundMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.adapter_types.TypeCodeNotFoundMsg".into()
    }
}
