// This file is @generated by prost-build.
#[derive(crate::macros::ProtoNew)]
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[::serde_with::skip_serializing_none]
#[derive(::serde::Serialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryExecuted {
    /// Raw SQL string that was executed. May be obfuscated.
    #[prost(string, tag = "1")]
    pub sql: ::prost::alloc::string::String,
    /// Blake3, 16-bytes hash of the raw SQL string encoded as hex.
    #[prost(string, tag = "2")]
    pub sql_hash: ::prost::alloc::string::String,
    /// Type of the adapter (e.g. "snowflake", "bigquery", "postgres", etc.)
    #[prost(string, tag = "3")]
    pub adapter_type: ::prost::alloc::string::String,
    /// Optional human-readable description of the query.
    #[prost(string, optional, tag = "4")]
    pub query_description: ::core::option::Option<::prost::alloc::string::String>,
    /// Database provided query ID for the executed query, if available.
    #[prost(string, optional, tag = "5")]
    pub query_id: ::core::option::Option<::prost::alloc::string::String>,
    /// unique_id of the node that generated this query. Some queries may not be associated with a single node.
    #[prost(string, optional, tag = "6")]
    pub unique_id: ::core::option::Option<::prost::alloc::string::String>,
    /// Outcome for this query execution.
    #[prost(enumeration = "QueryOutcome", tag = "7")]
    #[serde(
        serialize_with = "QueryOutcome::serialize",
        deserialize_with = "QueryOutcome::deserialize"
    )]
    #[cfg_attr(
        any(test, feature = "test-utils"),
        dummy(expr = "::fake::Fake::fake::<QueryOutcome>(&::fake::Faker) as i32")
    )]
    pub query_outcome: i32,
    /// Execution phase during which this query was evaluated, if available
    #[prost(enumeration = "super::phase::ExecutionPhase", optional, tag = "8")]
    #[serde(
        serialize_with = "super::phase::ExecutionPhase::serialize_optional",
        deserialize_with = "super::phase::ExecutionPhase::deserialize_optional"
    )]
    #[cfg_attr(
        any(test, feature = "test-utils"),
        dummy(
            expr = "Some(::fake::Fake::fake::<super::phase::ExecutionPhase>(&::fake::Faker) as i32)"
        )
    )]
    pub phase: ::core::option::Option<i32>,
    /// Arbitrary adapter defined error message
    #[prost(string, optional, tag = "9")]
    pub query_error_adapter_message: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    /// Arbitrary adapter (vendor) defined error code
    #[prost(int32, optional, tag = "10")]
    pub query_error_vendor_code: ::core::option::Option<i32>,
    /// Legacy dbt core event code: E016 or E017
    #[prost(string, tag = "11")]
    pub dbt_core_event_code: ::prost::alloc::string::String,
}
impl crate::StaticName for QueryExecuted {
    const FULL_NAME: &'static str = "v1.public.events.fusion.query.QueryExecuted";
    const TYPE_URL: &'static str = "/v1.public.events.fusion.query.QueryExecuted";
}
impl ::prost::Name for QueryExecuted {
    const NAME: &'static str = "QueryExecuted";
    const PACKAGE: &'static str = "v1.public.events.fusion.query";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.events.fusion.query.QueryExecuted".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.events.fusion.query.QueryExecuted".into()
    }
}
/// Outcome of a query execution
#[cfg_attr(any(test, feature = "test-utils"), derive(::fake::Dummy))]
#[derive(crate::macros::ProtoEnumSerde)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum QueryOutcome {
    /// Default value. Should only be set on unfinished spans
    Unspecified = 0,
    /// Successfully executed the query.
    Success = 1,
    /// Failed with an error type (individual errors reported as separate events).
    /// If set, `node_error_type` with also be set to indicate the type of error.
    Error = 2,
    /// Query was canceled (e.g. user-initiated cancellation).
    Canceled = 3,
}
impl QueryOutcome {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "QUERY_OUTCOME_UNSPECIFIED",
            Self::Success => "QUERY_OUTCOME_SUCCESS",
            Self::Error => "QUERY_OUTCOME_ERROR",
            Self::Canceled => "QUERY_OUTCOME_CANCELED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "QUERY_OUTCOME_UNSPECIFIED" => Some(Self::Unspecified),
            "QUERY_OUTCOME_SUCCESS" => Some(Self::Success),
            "QUERY_OUTCOME_ERROR" => Some(Self::Error),
            "QUERY_OUTCOME_CANCELED" => Some(Self::Canceled),
            _ => None,
        }
    }
}
