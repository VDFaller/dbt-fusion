// This file is @generated by prost-build.
/// Common event info
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CoreEventInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub level: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub invocation_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "6")]
    pub pid: i32,
    #[prost(string, tag = "7")]
    pub thread: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub ts: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(map = "string, string", tag = "9")]
    pub extra: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "10")]
    pub category: ::prost::alloc::string::String,
}
impl ::prost::Name for CoreEventInfo {
    const NAME: &'static str = "CoreEventInfo";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CoreEventInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CoreEventInfo".into()
    }
}
/// NodeRelation
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NodeRelation {
    #[prost(string, tag = "10")]
    pub database: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub alias: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub relation_name: ::prost::alloc::string::String,
}
impl ::prost::Name for NodeRelation {
    const NAME: &'static str = "NodeRelation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeRelation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeRelation".into()
    }
}
/// NodeInfo
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInfo {
    #[prost(string, tag = "1")]
    pub node_path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub node_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub resource_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub materialized: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub node_status: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub node_started_at: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub node_finished_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub meta: ::core::option::Option<::pbjson_types::Struct>,
    #[prost(message, optional, tag = "10")]
    pub node_relation: ::core::option::Option<NodeRelation>,
    #[prost(string, tag = "11")]
    pub node_checksum: ::prost::alloc::string::String,
}
impl ::prost::Name for NodeInfo {
    const NAME: &'static str = "NodeInfo";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeInfo".into()
    }
}
/// TimingInfoMsg
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TimingInfoMsg {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub started_at: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub completed_at: ::core::option::Option<::pbjson_types::Timestamp>,
}
impl ::prost::Name for TimingInfoMsg {
    const NAME: &'static str = "TimingInfoMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.TimingInfoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.TimingInfoMsg".into()
    }
}
/// RunResult
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultMsg {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub timing_info: ::prost::alloc::vec::Vec<TimingInfoMsg>,
    #[prost(string, tag = "4")]
    pub thread: ::prost::alloc::string::String,
    #[prost(float, tag = "5")]
    pub execution_time: f32,
    #[prost(message, optional, tag = "6")]
    pub adapter_response: ::core::option::Option<::pbjson_types::Struct>,
    #[prost(int32, tag = "7")]
    pub num_failures: i32,
}
impl ::prost::Name for RunResultMsg {
    const NAME: &'static str = "RunResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultMsg".into()
    }
}
/// ColumnType
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ColumnType {
    #[prost(string, tag = "1")]
    pub column_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub previous_column_type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub current_column_type: ::prost::alloc::string::String,
}
impl ::prost::Name for ColumnType {
    const NAME: &'static str = "ColumnType";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ColumnType".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ColumnType".into()
    }
}
/// ColumnConstraint
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ColumnConstraint {
    #[prost(string, tag = "1")]
    pub column_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub constraint_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub constraint_type: ::prost::alloc::string::String,
}
impl ::prost::Name for ColumnConstraint {
    const NAME: &'static str = "ColumnConstraint";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ColumnConstraint".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ColumnConstraint".into()
    }
}
/// ModelConstraint
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ModelConstraint {
    #[prost(string, tag = "1")]
    pub constraint_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub constraint_type: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub columns: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for ModelConstraint {
    const NAME: &'static str = "ModelConstraint";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ModelConstraint".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ModelConstraint".into()
    }
}
/// A001
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MainReportVersion {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub log_version: i32,
}
impl ::prost::Name for MainReportVersion {
    const NAME: &'static str = "MainReportVersion";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainReportVersion".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainReportVersion".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainReportVersionMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MainReportVersion>,
}
impl ::prost::Name for MainReportVersionMsg {
    const NAME: &'static str = "MainReportVersionMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainReportVersionMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainReportVersionMsg".into()
    }
}
/// A002
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainReportArgs {
    #[prost(map = "string, string", tag = "1")]
    pub args: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for MainReportArgs {
    const NAME: &'static str = "MainReportArgs";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainReportArgs".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainReportArgs".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainReportArgsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MainReportArgs>,
}
impl ::prost::Name for MainReportArgsMsg {
    const NAME: &'static str = "MainReportArgsMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainReportArgsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainReportArgsMsg".into()
    }
}
/// A003
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MainTrackingUserState {
    #[prost(string, tag = "1")]
    pub user_state: ::prost::alloc::string::String,
}
impl ::prost::Name for MainTrackingUserState {
    const NAME: &'static str = "MainTrackingUserState";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainTrackingUserState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainTrackingUserState".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainTrackingUserStateMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MainTrackingUserState>,
}
impl ::prost::Name for MainTrackingUserStateMsg {
    const NAME: &'static str = "MainTrackingUserStateMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainTrackingUserStateMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainTrackingUserStateMsg".into()
    }
}
/// A004
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MergedFromState {
    #[prost(int32, tag = "1")]
    pub num_merged: i32,
    #[prost(string, repeated, tag = "2")]
    pub sample: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for MergedFromState {
    const NAME: &'static str = "MergedFromState";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MergedFromState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MergedFromState".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MergedFromStateMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MergedFromState>,
}
impl ::prost::Name for MergedFromStateMsg {
    const NAME: &'static str = "MergedFromStateMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MergedFromStateMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MergedFromStateMsg".into()
    }
}
/// A005
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MissingProfileTarget {
    #[prost(string, tag = "1")]
    pub profile_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub target_name: ::prost::alloc::string::String,
}
impl ::prost::Name for MissingProfileTarget {
    const NAME: &'static str = "MissingProfileTarget";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MissingProfileTarget".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MissingProfileTarget".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissingProfileTargetMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MissingProfileTarget>,
}
impl ::prost::Name for MissingProfileTargetMsg {
    const NAME: &'static str = "MissingProfileTargetMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MissingProfileTargetMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MissingProfileTargetMsg".into()
    }
}
/// A008
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InvalidOptionYaml {
    #[prost(string, tag = "1")]
    pub option_name: ::prost::alloc::string::String,
}
impl ::prost::Name for InvalidOptionYaml {
    const NAME: &'static str = "InvalidOptionYAML";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidOptionYAML".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidOptionYAML".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvalidOptionYamlMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InvalidOptionYaml>,
}
impl ::prost::Name for InvalidOptionYamlMsg {
    const NAME: &'static str = "InvalidOptionYAMLMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidOptionYAMLMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidOptionYAMLMsg".into()
    }
}
/// A009
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LogDbtProjectError {
    #[prost(string, tag = "1")]
    pub exc: ::prost::alloc::string::String,
}
impl ::prost::Name for LogDbtProjectError {
    const NAME: &'static str = "LogDbtProjectError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogDbtProjectError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogDbtProjectError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogDbtProjectErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogDbtProjectError>,
}
impl ::prost::Name for LogDbtProjectErrorMsg {
    const NAME: &'static str = "LogDbtProjectErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogDbtProjectErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogDbtProjectErrorMsg".into()
    }
}
/// A011
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LogDbtProfileError {
    #[prost(string, tag = "1")]
    pub exc: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub profiles: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for LogDbtProfileError {
    const NAME: &'static str = "LogDbtProfileError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogDbtProfileError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogDbtProfileError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogDbtProfileErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogDbtProfileError>,
}
impl ::prost::Name for LogDbtProfileErrorMsg {
    const NAME: &'static str = "LogDbtProfileErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogDbtProfileErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogDbtProfileErrorMsg".into()
    }
}
/// A017
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StarterProjectPath {
    #[prost(string, tag = "1")]
    pub dir: ::prost::alloc::string::String,
}
impl ::prost::Name for StarterProjectPath {
    const NAME: &'static str = "StarterProjectPath";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.StarterProjectPath".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.StarterProjectPath".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StarterProjectPathMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<StarterProjectPath>,
}
impl ::prost::Name for StarterProjectPathMsg {
    const NAME: &'static str = "StarterProjectPathMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.StarterProjectPathMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.StarterProjectPathMsg".into()
    }
}
/// A018
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConfigFolderDirectory {
    #[prost(string, tag = "1")]
    pub dir: ::prost::alloc::string::String,
}
impl ::prost::Name for ConfigFolderDirectory {
    const NAME: &'static str = "ConfigFolderDirectory";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigFolderDirectory".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigFolderDirectory".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigFolderDirectoryMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConfigFolderDirectory>,
}
impl ::prost::Name for ConfigFolderDirectoryMsg {
    const NAME: &'static str = "ConfigFolderDirectoryMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigFolderDirectoryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigFolderDirectoryMsg".into()
    }
}
/// A019
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NoSampleProfileFound {
    #[prost(string, tag = "1")]
    pub adapter: ::prost::alloc::string::String,
}
impl ::prost::Name for NoSampleProfileFound {
    const NAME: &'static str = "NoSampleProfileFound";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NoSampleProfileFound".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NoSampleProfileFound".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoSampleProfileFoundMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NoSampleProfileFound>,
}
impl ::prost::Name for NoSampleProfileFoundMsg {
    const NAME: &'static str = "NoSampleProfileFoundMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NoSampleProfileFoundMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NoSampleProfileFoundMsg".into()
    }
}
/// A020
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProfileWrittenWithSample {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for ProfileWrittenWithSample {
    const NAME: &'static str = "ProfileWrittenWithSample";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProfileWrittenWithSample".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProfileWrittenWithSample".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProfileWrittenWithSampleMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ProfileWrittenWithSample>,
}
impl ::prost::Name for ProfileWrittenWithSampleMsg {
    const NAME: &'static str = "ProfileWrittenWithSampleMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProfileWrittenWithSampleMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProfileWrittenWithSampleMsg".into()
    }
}
/// A021
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProfileWrittenWithTargetTemplateYaml {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for ProfileWrittenWithTargetTemplateYaml {
    const NAME: &'static str = "ProfileWrittenWithTargetTemplateYAML";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProfileWrittenWithTargetTemplateYAML".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProfileWrittenWithTargetTemplateYAML".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProfileWrittenWithTargetTemplateYamlMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ProfileWrittenWithTargetTemplateYaml>,
}
impl ::prost::Name for ProfileWrittenWithTargetTemplateYamlMsg {
    const NAME: &'static str = "ProfileWrittenWithTargetTemplateYAMLMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProfileWrittenWithTargetTemplateYAMLMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProfileWrittenWithTargetTemplateYAMLMsg".into()
    }
}
/// A022
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProfileWrittenWithProjectTemplateYaml {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for ProfileWrittenWithProjectTemplateYaml {
    const NAME: &'static str = "ProfileWrittenWithProjectTemplateYAML";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProfileWrittenWithProjectTemplateYAML".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProfileWrittenWithProjectTemplateYAML".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProfileWrittenWithProjectTemplateYamlMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ProfileWrittenWithProjectTemplateYaml>,
}
impl ::prost::Name for ProfileWrittenWithProjectTemplateYamlMsg {
    const NAME: &'static str = "ProfileWrittenWithProjectTemplateYAMLMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProfileWrittenWithProjectTemplateYAMLMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProfileWrittenWithProjectTemplateYAMLMsg".into()
    }
}
/// A023
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SettingUpProfile {}
impl ::prost::Name for SettingUpProfile {
    const NAME: &'static str = "SettingUpProfile";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SettingUpProfile".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SettingUpProfile".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SettingUpProfileMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SettingUpProfile>,
}
impl ::prost::Name for SettingUpProfileMsg {
    const NAME: &'static str = "SettingUpProfileMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SettingUpProfileMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SettingUpProfileMsg".into()
    }
}
/// A024
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InvalidProfileTemplateYaml {}
impl ::prost::Name for InvalidProfileTemplateYaml {
    const NAME: &'static str = "InvalidProfileTemplateYAML";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidProfileTemplateYAML".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidProfileTemplateYAML".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvalidProfileTemplateYamlMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InvalidProfileTemplateYaml>,
}
impl ::prost::Name for InvalidProfileTemplateYamlMsg {
    const NAME: &'static str = "InvalidProfileTemplateYAMLMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidProfileTemplateYAMLMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidProfileTemplateYAMLMsg".into()
    }
}
/// A025
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProjectNameAlreadyExists {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for ProjectNameAlreadyExists {
    const NAME: &'static str = "ProjectNameAlreadyExists";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProjectNameAlreadyExists".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProjectNameAlreadyExists".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProjectNameAlreadyExistsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ProjectNameAlreadyExists>,
}
impl ::prost::Name for ProjectNameAlreadyExistsMsg {
    const NAME: &'static str = "ProjectNameAlreadyExistsMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProjectNameAlreadyExistsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProjectNameAlreadyExistsMsg".into()
    }
}
/// A026
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProjectCreated {
    #[prost(string, tag = "1")]
    pub project_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub docs_url: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub slack_url: ::prost::alloc::string::String,
}
impl ::prost::Name for ProjectCreated {
    const NAME: &'static str = "ProjectCreated";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProjectCreated".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProjectCreated".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProjectCreatedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ProjectCreated>,
}
impl ::prost::Name for ProjectCreatedMsg {
    const NAME: &'static str = "ProjectCreatedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProjectCreatedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProjectCreatedMsg".into()
    }
}
/// D001
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PackageRedirectDeprecation {
    #[prost(string, tag = "1")]
    pub old_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_name: ::prost::alloc::string::String,
}
impl ::prost::Name for PackageRedirectDeprecation {
    const NAME: &'static str = "PackageRedirectDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PackageRedirectDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PackageRedirectDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PackageRedirectDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PackageRedirectDeprecation>,
}
impl ::prost::Name for PackageRedirectDeprecationMsg {
    const NAME: &'static str = "PackageRedirectDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PackageRedirectDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PackageRedirectDeprecationMsg".into()
    }
}
/// D002
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PackageInstallPathDeprecation {}
impl ::prost::Name for PackageInstallPathDeprecation {
    const NAME: &'static str = "PackageInstallPathDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PackageInstallPathDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PackageInstallPathDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PackageInstallPathDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PackageInstallPathDeprecation>,
}
impl ::prost::Name for PackageInstallPathDeprecationMsg {
    const NAME: &'static str = "PackageInstallPathDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PackageInstallPathDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PackageInstallPathDeprecationMsg".into()
    }
}
/// D003
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConfigSourcePathDeprecation {
    #[prost(string, tag = "1")]
    pub deprecated_path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exp_path: ::prost::alloc::string::String,
}
impl ::prost::Name for ConfigSourcePathDeprecation {
    const NAME: &'static str = "ConfigSourcePathDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigSourcePathDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigSourcePathDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigSourcePathDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConfigSourcePathDeprecation>,
}
impl ::prost::Name for ConfigSourcePathDeprecationMsg {
    const NAME: &'static str = "ConfigSourcePathDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigSourcePathDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigSourcePathDeprecationMsg".into()
    }
}
/// D004
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConfigDataPathDeprecation {
    #[prost(string, tag = "1")]
    pub deprecated_path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exp_path: ::prost::alloc::string::String,
}
impl ::prost::Name for ConfigDataPathDeprecation {
    const NAME: &'static str = "ConfigDataPathDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigDataPathDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigDataPathDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigDataPathDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConfigDataPathDeprecation>,
}
impl ::prost::Name for ConfigDataPathDeprecationMsg {
    const NAME: &'static str = "ConfigDataPathDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigDataPathDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigDataPathDeprecationMsg".into()
    }
}
/// D006
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MetricAttributesRenamed {
    #[prost(string, tag = "1")]
    pub metric_name: ::prost::alloc::string::String,
}
impl ::prost::Name for MetricAttributesRenamed {
    const NAME: &'static str = "MetricAttributesRenamed";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MetricAttributesRenamed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MetricAttributesRenamed".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricAttributesRenamedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MetricAttributesRenamed>,
}
impl ::prost::Name for MetricAttributesRenamedMsg {
    const NAME: &'static str = "MetricAttributesRenamedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MetricAttributesRenamedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MetricAttributesRenamedMsg".into()
    }
}
/// D007
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ExposureNameDeprecation {
    #[prost(string, tag = "1")]
    pub exposure: ::prost::alloc::string::String,
}
impl ::prost::Name for ExposureNameDeprecation {
    const NAME: &'static str = "ExposureNameDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ExposureNameDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ExposureNameDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExposureNameDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ExposureNameDeprecation>,
}
impl ::prost::Name for ExposureNameDeprecationMsg {
    const NAME: &'static str = "ExposureNameDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ExposureNameDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ExposureNameDeprecationMsg".into()
    }
}
/// D008
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InternalDeprecation {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub reason: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub suggested_action: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
}
impl ::prost::Name for InternalDeprecation {
    const NAME: &'static str = "InternalDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InternalDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InternalDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InternalDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InternalDeprecation>,
}
impl ::prost::Name for InternalDeprecationMsg {
    const NAME: &'static str = "InternalDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InternalDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InternalDeprecationMsg".into()
    }
}
/// D009
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EnvironmentVariableRenamed {
    #[prost(string, tag = "1")]
    pub old_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub new_name: ::prost::alloc::string::String,
}
impl ::prost::Name for EnvironmentVariableRenamed {
    const NAME: &'static str = "EnvironmentVariableRenamed";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EnvironmentVariableRenamed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EnvironmentVariableRenamed".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnvironmentVariableRenamedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<EnvironmentVariableRenamed>,
}
impl ::prost::Name for EnvironmentVariableRenamedMsg {
    const NAME: &'static str = "EnvironmentVariableRenamedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EnvironmentVariableRenamedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EnvironmentVariableRenamedMsg".into()
    }
}
/// D010
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConfigLogPathDeprecation {
    #[prost(string, tag = "1")]
    pub deprecated_path: ::prost::alloc::string::String,
}
impl ::prost::Name for ConfigLogPathDeprecation {
    const NAME: &'static str = "ConfigLogPathDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigLogPathDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigLogPathDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigLogPathDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConfigLogPathDeprecation>,
}
impl ::prost::Name for ConfigLogPathDeprecationMsg {
    const NAME: &'static str = "ConfigLogPathDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigLogPathDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigLogPathDeprecationMsg".into()
    }
}
/// D011
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConfigTargetPathDeprecation {
    #[prost(string, tag = "1")]
    pub deprecated_path: ::prost::alloc::string::String,
}
impl ::prost::Name for ConfigTargetPathDeprecation {
    const NAME: &'static str = "ConfigTargetPathDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigTargetPathDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigTargetPathDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigTargetPathDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConfigTargetPathDeprecation>,
}
impl ::prost::Name for ConfigTargetPathDeprecationMsg {
    const NAME: &'static str = "ConfigTargetPathDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfigTargetPathDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfigTargetPathDeprecationMsg".into()
    }
}
/// D012
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TestsConfigDeprecation {
    #[prost(string, tag = "1")]
    pub deprecated_path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exp_path: ::prost::alloc::string::String,
}
impl ::prost::Name for TestsConfigDeprecation {
    const NAME: &'static str = "TestsConfigDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.TestsConfigDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.TestsConfigDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TestsConfigDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<TestsConfigDeprecation>,
}
impl ::prost::Name for TestsConfigDeprecationMsg {
    const NAME: &'static str = "TestsConfigDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.TestsConfigDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.TestsConfigDeprecationMsg".into()
    }
}
/// D013
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProjectFlagsMovedDeprecation {}
impl ::prost::Name for ProjectFlagsMovedDeprecation {
    const NAME: &'static str = "ProjectFlagsMovedDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProjectFlagsMovedDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProjectFlagsMovedDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProjectFlagsMovedDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ProjectFlagsMovedDeprecation>,
}
impl ::prost::Name for ProjectFlagsMovedDeprecationMsg {
    const NAME: &'static str = "ProjectFlagsMovedDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProjectFlagsMovedDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProjectFlagsMovedDeprecationMsg".into()
    }
}
/// D014
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SpacesInResourceNameDeprecation {
    #[prost(string, tag = "1")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub level: ::prost::alloc::string::String,
}
impl ::prost::Name for SpacesInResourceNameDeprecation {
    const NAME: &'static str = "SpacesInResourceNameDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SpacesInResourceNameDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SpacesInResourceNameDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpacesInResourceNameDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SpacesInResourceNameDeprecation>,
}
impl ::prost::Name for SpacesInResourceNameDeprecationMsg {
    const NAME: &'static str = "SpacesInResourceNameDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SpacesInResourceNameDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SpacesInResourceNameDeprecationMsg".into()
    }
}
/// D015
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ResourceNamesWithSpacesDeprecation {
    #[prost(int32, tag = "1")]
    pub count_invalid_names: i32,
    #[prost(bool, tag = "2")]
    pub show_debug_hint: bool,
    #[prost(string, tag = "3")]
    pub level: ::prost::alloc::string::String,
}
impl ::prost::Name for ResourceNamesWithSpacesDeprecation {
    const NAME: &'static str = "ResourceNamesWithSpacesDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ResourceNamesWithSpacesDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ResourceNamesWithSpacesDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceNamesWithSpacesDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ResourceNamesWithSpacesDeprecation>,
}
impl ::prost::Name for ResourceNamesWithSpacesDeprecationMsg {
    const NAME: &'static str = "ResourceNamesWithSpacesDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ResourceNamesWithSpacesDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ResourceNamesWithSpacesDeprecationMsg".into()
    }
}
/// D016
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PackageMaterializationOverrideDeprecation {
    #[prost(string, tag = "1")]
    pub package_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub materialization_name: ::prost::alloc::string::String,
}
impl ::prost::Name for PackageMaterializationOverrideDeprecation {
    const NAME: &'static str = "PackageMaterializationOverrideDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PackageMaterializationOverrideDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PackageMaterializationOverrideDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PackageMaterializationOverrideDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PackageMaterializationOverrideDeprecation>,
}
impl ::prost::Name for PackageMaterializationOverrideDeprecationMsg {
    const NAME: &'static str = "PackageMaterializationOverrideDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PackageMaterializationOverrideDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PackageMaterializationOverrideDeprecationMsg"
            .into()
    }
}
/// D017
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SourceFreshnessProjectHooksNotRun {}
impl ::prost::Name for SourceFreshnessProjectHooksNotRun {
    const NAME: &'static str = "SourceFreshnessProjectHooksNotRun";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SourceFreshnessProjectHooksNotRun".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SourceFreshnessProjectHooksNotRun".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SourceFreshnessProjectHooksNotRunMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SourceFreshnessProjectHooksNotRun>,
}
impl ::prost::Name for SourceFreshnessProjectHooksNotRunMsg {
    const NAME: &'static str = "SourceFreshnessProjectHooksNotRunMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SourceFreshnessProjectHooksNotRunMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SourceFreshnessProjectHooksNotRunMsg".into()
    }
}
/// D018
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MfTimespineWithoutYamlConfigurationDeprecation {}
impl ::prost::Name for MfTimespineWithoutYamlConfigurationDeprecation {
    const NAME: &'static str = "MFTimespineWithoutYamlConfigurationDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MFTimespineWithoutYamlConfigurationDeprecation"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MFTimespineWithoutYamlConfigurationDeprecation"
            .into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MfTimespineWithoutYamlConfigurationDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MfTimespineWithoutYamlConfigurationDeprecation>,
}
impl ::prost::Name for MfTimespineWithoutYamlConfigurationDeprecationMsg {
    const NAME: &'static str = "MFTimespineWithoutYamlConfigurationDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MFTimespineWithoutYamlConfigurationDeprecationMsg"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MFTimespineWithoutYamlConfigurationDeprecationMsg"
            .into()
    }
}
/// D019
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MfCumulativeTypeParamsDeprecation {}
impl ::prost::Name for MfCumulativeTypeParamsDeprecation {
    const NAME: &'static str = "MFCumulativeTypeParamsDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MFCumulativeTypeParamsDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MFCumulativeTypeParamsDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MfCumulativeTypeParamsDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MfCumulativeTypeParamsDeprecation>,
}
impl ::prost::Name for MfCumulativeTypeParamsDeprecationMsg {
    const NAME: &'static str = "MFCumulativeTypeParamsDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MFCumulativeTypeParamsDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MFCumulativeTypeParamsDeprecationMsg".into()
    }
}
/// D020
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MicrobatchMacroOutsideOfBatchesDeprecation {}
impl ::prost::Name for MicrobatchMacroOutsideOfBatchesDeprecation {
    const NAME: &'static str = "MicrobatchMacroOutsideOfBatchesDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MicrobatchMacroOutsideOfBatchesDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MicrobatchMacroOutsideOfBatchesDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MicrobatchMacroOutsideOfBatchesDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MicrobatchMacroOutsideOfBatchesDeprecation>,
}
impl ::prost::Name for MicrobatchMacroOutsideOfBatchesDeprecationMsg {
    const NAME: &'static str = "MicrobatchMacroOutsideOfBatchesDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MicrobatchMacroOutsideOfBatchesDeprecationMsg"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MicrobatchMacroOutsideOfBatchesDeprecationMsg"
            .into()
    }
}
/// D022
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GenericJsonSchemaValidationDeprecation {
    #[prost(string, tag = "1")]
    pub violation: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub key_path: ::prost::alloc::string::String,
}
impl ::prost::Name for GenericJsonSchemaValidationDeprecation {
    const NAME: &'static str = "GenericJSONSchemaValidationDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GenericJSONSchemaValidationDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GenericJSONSchemaValidationDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenericJsonSchemaValidationDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<GenericJsonSchemaValidationDeprecation>,
}
impl ::prost::Name for GenericJsonSchemaValidationDeprecationMsg {
    const NAME: &'static str = "GenericJSONSchemaValidationDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GenericJSONSchemaValidationDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GenericJSONSchemaValidationDeprecationMsg".into()
    }
}
/// D023
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UnexpectedJinjaBlockDeprecation {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
}
impl ::prost::Name for UnexpectedJinjaBlockDeprecation {
    const NAME: &'static str = "UnexpectedJinjaBlockDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnexpectedJinjaBlockDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnexpectedJinjaBlockDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnexpectedJinjaBlockDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<UnexpectedJinjaBlockDeprecation>,
}
impl ::prost::Name for UnexpectedJinjaBlockDeprecationMsg {
    const NAME: &'static str = "UnexpectedJinjaBlockDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnexpectedJinjaBlockDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnexpectedJinjaBlockDeprecationMsg".into()
    }
}
/// D024
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DuplicateYamlKeysDeprecation {
    #[prost(string, tag = "1")]
    pub duplicate_description: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
}
impl ::prost::Name for DuplicateYamlKeysDeprecation {
    const NAME: &'static str = "DuplicateYAMLKeysDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DuplicateYAMLKeysDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DuplicateYAMLKeysDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DuplicateYamlKeysDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DuplicateYamlKeysDeprecation>,
}
impl ::prost::Name for DuplicateYamlKeysDeprecationMsg {
    const NAME: &'static str = "DuplicateYAMLKeysDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DuplicateYAMLKeysDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DuplicateYAMLKeysDeprecationMsg".into()
    }
}
/// D025
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CustomTopLevelKeyDeprecation {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
}
impl ::prost::Name for CustomTopLevelKeyDeprecation {
    const NAME: &'static str = "CustomTopLevelKeyDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CustomTopLevelKeyDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CustomTopLevelKeyDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomTopLevelKeyDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CustomTopLevelKeyDeprecation>,
}
impl ::prost::Name for CustomTopLevelKeyDeprecationMsg {
    const NAME: &'static str = "CustomTopLevelKeyDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CustomTopLevelKeyDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CustomTopLevelKeyDeprecationMsg".into()
    }
}
/// D026
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CustomKeyInConfigDeprecation {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub key_path: ::prost::alloc::string::String,
}
impl ::prost::Name for CustomKeyInConfigDeprecation {
    const NAME: &'static str = "CustomKeyInConfigDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CustomKeyInConfigDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CustomKeyInConfigDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomKeyInConfigDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CustomKeyInConfigDeprecation>,
}
impl ::prost::Name for CustomKeyInConfigDeprecationMsg {
    const NAME: &'static str = "CustomKeyInConfigDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CustomKeyInConfigDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CustomKeyInConfigDeprecationMsg".into()
    }
}
/// D027
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CustomKeyInObjectDeprecation {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub key_path: ::prost::alloc::string::String,
}
impl ::prost::Name for CustomKeyInObjectDeprecation {
    const NAME: &'static str = "CustomKeyInObjectDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CustomKeyInObjectDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CustomKeyInObjectDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomKeyInObjectDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CustomKeyInObjectDeprecation>,
}
impl ::prost::Name for CustomKeyInObjectDeprecationMsg {
    const NAME: &'static str = "CustomKeyInObjectDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CustomKeyInObjectDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CustomKeyInObjectDeprecationMsg".into()
    }
}
/// D028
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeprecationSummary {
    #[prost(string, tag = "1")]
    pub event_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub event_code: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub occurrences: i32,
}
impl ::prost::Name for DeprecationSummary {
    const NAME: &'static str = "DeprecationSummary";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DeprecationSummary".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DeprecationSummary".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeprecationsSummary {
    #[prost(message, repeated, tag = "1")]
    pub summaries: ::prost::alloc::vec::Vec<DeprecationSummary>,
    #[prost(bool, tag = "2")]
    pub show_all_hint: bool,
}
impl ::prost::Name for DeprecationsSummary {
    const NAME: &'static str = "DeprecationsSummary";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DeprecationsSummary".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DeprecationsSummary".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeprecationsSummaryMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DeprecationsSummary>,
}
impl ::prost::Name for DeprecationsSummaryMsg {
    const NAME: &'static str = "DeprecationsSummaryMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DeprecationsSummaryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DeprecationsSummaryMsg".into()
    }
}
/// D029
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CustomOutputPathInSourceFreshnessDeprecation {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for CustomOutputPathInSourceFreshnessDeprecation {
    const NAME: &'static str = "CustomOutputPathInSourceFreshnessDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CustomOutputPathInSourceFreshnessDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CustomOutputPathInSourceFreshnessDeprecation"
            .into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomOutputPathInSourceFreshnessDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CustomOutputPathInSourceFreshnessDeprecation>,
}
impl ::prost::Name for CustomOutputPathInSourceFreshnessDeprecationMsg {
    const NAME: &'static str = "CustomOutputPathInSourceFreshnessDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CustomOutputPathInSourceFreshnessDeprecationMsg"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CustomOutputPathInSourceFreshnessDeprecationMsg"
            .into()
    }
}
/// D030
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PropertyMovedToConfigDeprecation {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub key_path: ::prost::alloc::string::String,
}
impl ::prost::Name for PropertyMovedToConfigDeprecation {
    const NAME: &'static str = "PropertyMovedToConfigDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PropertyMovedToConfigDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PropertyMovedToConfigDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PropertyMovedToConfigDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PropertyMovedToConfigDeprecation>,
}
impl ::prost::Name for PropertyMovedToConfigDeprecationMsg {
    const NAME: &'static str = "PropertyMovedToConfigDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PropertyMovedToConfigDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PropertyMovedToConfigDeprecationMsg".into()
    }
}
/// D031
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WeoIncludeExcludeDeprecation {
    #[prost(bool, tag = "1")]
    pub found_include: bool,
    #[prost(bool, tag = "2")]
    pub found_exclude: bool,
}
impl ::prost::Name for WeoIncludeExcludeDeprecation {
    const NAME: &'static str = "WEOIncludeExcludeDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.WEOIncludeExcludeDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.WEOIncludeExcludeDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeoIncludeExcludeDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<WeoIncludeExcludeDeprecation>,
}
impl ::prost::Name for WeoIncludeExcludeDeprecationMsg {
    const NAME: &'static str = "WEOIncludeExcludeDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.WEOIncludeExcludeDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.WEOIncludeExcludeDeprecationMsg".into()
    }
}
/// D032
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ModelParamUsageDeprecation {}
impl ::prost::Name for ModelParamUsageDeprecation {
    const NAME: &'static str = "ModelParamUsageDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ModelParamUsageDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ModelParamUsageDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModelParamUsageDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ModelParamUsageDeprecation>,
}
impl ::prost::Name for ModelParamUsageDeprecationMsg {
    const NAME: &'static str = "ModelParamUsageDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ModelParamUsageDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ModelParamUsageDeprecationMsg".into()
    }
}
/// D033
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ResourceTypesParamUsageDeprecation {}
impl ::prost::Name for ResourceTypesParamUsageDeprecation {
    const NAME: &'static str = "ResourceTypesParamUsageDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ResourceTypesParamUsageDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ResourceTypesParamUsageDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceTypesParamUsageDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ResourceTypesParamUsageDeprecation>,
}
impl ::prost::Name for ResourceTypesParamUsageDeprecationMsg {
    const NAME: &'static str = "ResourceTypesParamUsageDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ResourceTypesParamUsageDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ResourceTypesParamUsageDeprecationMsg".into()
    }
}
/// D034
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ModulesItertoolsUsageDeprecation {}
impl ::prost::Name for ModulesItertoolsUsageDeprecation {
    const NAME: &'static str = "ModulesItertoolsUsageDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ModulesItertoolsUsageDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ModulesItertoolsUsageDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModulesItertoolsUsageDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ModulesItertoolsUsageDeprecation>,
}
impl ::prost::Name for ModulesItertoolsUsageDeprecationMsg {
    const NAME: &'static str = "ModulesItertoolsUsageDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ModulesItertoolsUsageDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ModulesItertoolsUsageDeprecationMsg".into()
    }
}
/// D035
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SourceOverrideDeprecation {
    #[prost(string, tag = "1")]
    pub source_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
}
impl ::prost::Name for SourceOverrideDeprecation {
    const NAME: &'static str = "SourceOverrideDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SourceOverrideDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SourceOverrideDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SourceOverrideDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SourceOverrideDeprecation>,
}
impl ::prost::Name for SourceOverrideDeprecationMsg {
    const NAME: &'static str = "SourceOverrideDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SourceOverrideDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SourceOverrideDeprecationMsg".into()
    }
}
/// D036
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EnvironmentVariableNamespaceDeprecation {
    #[prost(string, tag = "1")]
    pub env_var: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub reserved_prefix: ::prost::alloc::string::String,
}
impl ::prost::Name for EnvironmentVariableNamespaceDeprecation {
    const NAME: &'static str = "EnvironmentVariableNamespaceDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EnvironmentVariableNamespaceDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EnvironmentVariableNamespaceDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnvironmentVariableNamespaceDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<EnvironmentVariableNamespaceDeprecation>,
}
impl ::prost::Name for EnvironmentVariableNamespaceDeprecationMsg {
    const NAME: &'static str = "EnvironmentVariableNamespaceDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EnvironmentVariableNamespaceDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EnvironmentVariableNamespaceDeprecationMsg".into()
    }
}
/// D037
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MissingPlusPrefixDeprecation {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub key_path: ::prost::alloc::string::String,
}
impl ::prost::Name for MissingPlusPrefixDeprecation {
    const NAME: &'static str = "MissingPlusPrefixDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MissingPlusPrefixDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MissingPlusPrefixDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissingPlusPrefixDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MissingPlusPrefixDeprecation>,
}
impl ::prost::Name for MissingPlusPrefixDeprecationMsg {
    const NAME: &'static str = "MissingPlusPrefixDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MissingPlusPrefixDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MissingPlusPrefixDeprecationMsg".into()
    }
}
/// unused
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ArgsPropertyInGenericTestDeprecation {
    #[prost(string, tag = "1")]
    pub file: ::prost::alloc::string::String,
}
impl ::prost::Name for ArgsPropertyInGenericTestDeprecation {
    const NAME: &'static str = "ArgsPropertyInGenericTestDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArgsPropertyInGenericTestDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArgsPropertyInGenericTestDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArgsPropertyInGenericTestDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ArgsPropertyInGenericTestDeprecation>,
}
impl ::prost::Name for ArgsPropertyInGenericTestDeprecationMsg {
    const NAME: &'static str = "ArgsPropertyInGenericTestDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArgsPropertyInGenericTestDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArgsPropertyInGenericTestDeprecationMsg".into()
    }
}
/// D038
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ArgumentsPropertyInGenericTestDeprecation {
    #[prost(string, tag = "1")]
    pub test_name: ::prost::alloc::string::String,
}
impl ::prost::Name for ArgumentsPropertyInGenericTestDeprecation {
    const NAME: &'static str = "ArgumentsPropertyInGenericTestDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArgumentsPropertyInGenericTestDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArgumentsPropertyInGenericTestDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArgumentsPropertyInGenericTestDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ArgumentsPropertyInGenericTestDeprecation>,
}
impl ::prost::Name for ArgumentsPropertyInGenericTestDeprecationMsg {
    const NAME: &'static str = "ArgumentsPropertyInGenericTestDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArgumentsPropertyInGenericTestDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArgumentsPropertyInGenericTestDeprecationMsg"
            .into()
    }
}
/// D039
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MissingArgumentsPropertyInGenericTestDeprecation {
    #[prost(string, tag = "1")]
    pub test_name: ::prost::alloc::string::String,
}
impl ::prost::Name for MissingArgumentsPropertyInGenericTestDeprecation {
    const NAME: &'static str = "MissingArgumentsPropertyInGenericTestDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MissingArgumentsPropertyInGenericTestDeprecation"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MissingArgumentsPropertyInGenericTestDeprecation"
            .into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissingArgumentsPropertyInGenericTestDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MissingArgumentsPropertyInGenericTestDeprecation>,
}
impl ::prost::Name for MissingArgumentsPropertyInGenericTestDeprecationMsg {
    const NAME: &'static str = "MissingArgumentsPropertyInGenericTestDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MissingArgumentsPropertyInGenericTestDeprecationMsg"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MissingArgumentsPropertyInGenericTestDeprecationMsg"
            .into()
    }
}
/// I065
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeprecatedModel {
    #[prost(string, tag = "1")]
    pub model_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub model_version: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub deprecation_date: ::prost::alloc::string::String,
}
impl ::prost::Name for DeprecatedModel {
    const NAME: &'static str = "DeprecatedModel";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DeprecatedModel".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DeprecatedModel".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeprecatedModelMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DeprecatedModel>,
}
impl ::prost::Name for DeprecatedModelMsg {
    const NAME: &'static str = "DeprecatedModelMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DeprecatedModelMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DeprecatedModelMsg".into()
    }
}
/// I001
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InputFileDiffError {
    #[prost(string, tag = "1")]
    pub category: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub file_id: ::prost::alloc::string::String,
}
impl ::prost::Name for InputFileDiffError {
    const NAME: &'static str = "InputFileDiffError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InputFileDiffError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InputFileDiffError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputFileDiffErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InputFileDiffError>,
}
impl ::prost::Name for InputFileDiffErrorMsg {
    const NAME: &'static str = "InputFileDiffErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InputFileDiffErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InputFileDiffErrorMsg".into()
    }
}
/// I008
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InvalidValueForField {
    #[prost(string, tag = "1")]
    pub field_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub field_value: ::prost::alloc::string::String,
}
impl ::prost::Name for InvalidValueForField {
    const NAME: &'static str = "InvalidValueForField";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidValueForField".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidValueForField".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvalidValueForFieldMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InvalidValueForField>,
}
impl ::prost::Name for InvalidValueForFieldMsg {
    const NAME: &'static str = "InvalidValueForFieldMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidValueForFieldMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidValueForFieldMsg".into()
    }
}
/// I009
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ValidationWarning {
    #[prost(string, tag = "1")]
    pub resource_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub field_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub node_name: ::prost::alloc::string::String,
}
impl ::prost::Name for ValidationWarning {
    const NAME: &'static str = "ValidationWarning";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ValidationWarning".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ValidationWarning".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidationWarningMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ValidationWarning>,
}
impl ::prost::Name for ValidationWarningMsg {
    const NAME: &'static str = "ValidationWarningMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ValidationWarningMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ValidationWarningMsg".into()
    }
}
/// I010
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ParsePerfInfoPath {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for ParsePerfInfoPath {
    const NAME: &'static str = "ParsePerfInfoPath";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ParsePerfInfoPath".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ParsePerfInfoPath".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParsePerfInfoPathMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ParsePerfInfoPath>,
}
impl ::prost::Name for ParsePerfInfoPathMsg {
    const NAME: &'static str = "ParsePerfInfoPathMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ParsePerfInfoPathMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ParsePerfInfoPathMsg".into()
    }
}
/// I014
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PartialParsingErrorProcessingFile {
    #[prost(string, tag = "1")]
    pub file: ::prost::alloc::string::String,
}
impl ::prost::Name for PartialParsingErrorProcessingFile {
    const NAME: &'static str = "PartialParsingErrorProcessingFile";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingErrorProcessingFile".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingErrorProcessingFile".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialParsingErrorProcessingFileMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PartialParsingErrorProcessingFile>,
}
impl ::prost::Name for PartialParsingErrorProcessingFileMsg {
    const NAME: &'static str = "PartialParsingErrorProcessingFileMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingErrorProcessingFileMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingErrorProcessingFileMsg".into()
    }
}
/// I016
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialParsingError {
    #[prost(map = "string, string", tag = "1")]
    pub exc_info: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for PartialParsingError {
    const NAME: &'static str = "PartialParsingError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialParsingErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PartialParsingError>,
}
impl ::prost::Name for PartialParsingErrorMsg {
    const NAME: &'static str = "PartialParsingErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingErrorMsg".into()
    }
}
/// I017
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PartialParsingSkipParsing {}
impl ::prost::Name for PartialParsingSkipParsing {
    const NAME: &'static str = "PartialParsingSkipParsing";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingSkipParsing".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingSkipParsing".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialParsingSkipParsingMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PartialParsingSkipParsing>,
}
impl ::prost::Name for PartialParsingSkipParsingMsg {
    const NAME: &'static str = "PartialParsingSkipParsingMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingSkipParsingMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingSkipParsingMsg".into()
    }
}
/// I024
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UnableToPartialParse {
    #[prost(string, tag = "1")]
    pub reason: ::prost::alloc::string::String,
}
impl ::prost::Name for UnableToPartialParse {
    const NAME: &'static str = "UnableToPartialParse";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnableToPartialParse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnableToPartialParse".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnableToPartialParseMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<UnableToPartialParse>,
}
impl ::prost::Name for UnableToPartialParseMsg {
    const NAME: &'static str = "UnableToPartialParseMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnableToPartialParseMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnableToPartialParseMsg".into()
    }
}
/// I025
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StateCheckVarsHash {
    #[prost(string, tag = "1")]
    pub checksum: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub vars: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub profile: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub target: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub version: ::prost::alloc::string::String,
}
impl ::prost::Name for StateCheckVarsHash {
    const NAME: &'static str = "StateCheckVarsHash";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.StateCheckVarsHash".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.StateCheckVarsHash".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StateCheckVarsHashMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<StateCheckVarsHash>,
}
impl ::prost::Name for StateCheckVarsHashMsg {
    const NAME: &'static str = "StateCheckVarsHashMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.StateCheckVarsHashMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.StateCheckVarsHashMsg".into()
    }
}
/// I028
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PartialParsingNotEnabled {}
impl ::prost::Name for PartialParsingNotEnabled {
    const NAME: &'static str = "PartialParsingNotEnabled";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingNotEnabled".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingNotEnabled".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialParsingNotEnabledMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PartialParsingNotEnabled>,
}
impl ::prost::Name for PartialParsingNotEnabledMsg {
    const NAME: &'static str = "PartialParsingNotEnabledMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingNotEnabledMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingNotEnabledMsg".into()
    }
}
/// I029
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ParsedFileLoadFailed {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exc: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub exc_info: ::prost::alloc::string::String,
}
impl ::prost::Name for ParsedFileLoadFailed {
    const NAME: &'static str = "ParsedFileLoadFailed";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ParsedFileLoadFailed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ParsedFileLoadFailed".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParsedFileLoadFailedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ParsedFileLoadFailed>,
}
impl ::prost::Name for ParsedFileLoadFailedMsg {
    const NAME: &'static str = "ParsedFileLoadFailedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ParsedFileLoadFailedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ParsedFileLoadFailedMsg".into()
    }
}
/// I040
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PartialParsingEnabled {
    #[prost(int32, tag = "1")]
    pub deleted: i32,
    #[prost(int32, tag = "2")]
    pub added: i32,
    #[prost(int32, tag = "3")]
    pub changed: i32,
}
impl ::prost::Name for PartialParsingEnabled {
    const NAME: &'static str = "PartialParsingEnabled";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingEnabled".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingEnabled".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialParsingEnabledMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PartialParsingEnabled>,
}
impl ::prost::Name for PartialParsingEnabledMsg {
    const NAME: &'static str = "PartialParsingEnabledMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingEnabledMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingEnabledMsg".into()
    }
}
/// I041
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PartialParsingFile {
    #[prost(string, tag = "1")]
    pub file_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub operation: ::prost::alloc::string::String,
}
impl ::prost::Name for PartialParsingFile {
    const NAME: &'static str = "PartialParsingFile";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingFile".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingFile".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialParsingFileMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<PartialParsingFile>,
}
impl ::prost::Name for PartialParsingFileMsg {
    const NAME: &'static str = "PartialParsingFileMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.PartialParsingFileMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.PartialParsingFileMsg".into()
    }
}
/// I050
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InvalidDisabledTargetInTestNode {
    #[prost(string, tag = "1")]
    pub resource_type_title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub original_file_path: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub target_kind: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub target_name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub target_package: ::prost::alloc::string::String,
}
impl ::prost::Name for InvalidDisabledTargetInTestNode {
    const NAME: &'static str = "InvalidDisabledTargetInTestNode";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidDisabledTargetInTestNode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidDisabledTargetInTestNode".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvalidDisabledTargetInTestNodeMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InvalidDisabledTargetInTestNode>,
}
impl ::prost::Name for InvalidDisabledTargetInTestNodeMsg {
    const NAME: &'static str = "InvalidDisabledTargetInTestNodeMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidDisabledTargetInTestNodeMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidDisabledTargetInTestNodeMsg".into()
    }
}
/// I051
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UnusedResourceConfigPath {
    #[prost(string, repeated, tag = "1")]
    pub unused_config_paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for UnusedResourceConfigPath {
    const NAME: &'static str = "UnusedResourceConfigPath";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnusedResourceConfigPath".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnusedResourceConfigPath".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnusedResourceConfigPathMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<UnusedResourceConfigPath>,
}
impl ::prost::Name for UnusedResourceConfigPathMsg {
    const NAME: &'static str = "UnusedResourceConfigPathMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnusedResourceConfigPathMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnusedResourceConfigPathMsg".into()
    }
}
/// I052
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SeedIncreased {
    #[prost(string, tag = "1")]
    pub package_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for SeedIncreased {
    const NAME: &'static str = "SeedIncreased";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedIncreased".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedIncreased".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeedIncreasedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SeedIncreased>,
}
impl ::prost::Name for SeedIncreasedMsg {
    const NAME: &'static str = "SeedIncreasedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedIncreasedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedIncreasedMsg".into()
    }
}
/// I053
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SeedExceedsLimitSamePath {
    #[prost(string, tag = "1")]
    pub package_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for SeedExceedsLimitSamePath {
    const NAME: &'static str = "SeedExceedsLimitSamePath";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedExceedsLimitSamePath".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedExceedsLimitSamePath".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeedExceedsLimitSamePathMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SeedExceedsLimitSamePath>,
}
impl ::prost::Name for SeedExceedsLimitSamePathMsg {
    const NAME: &'static str = "SeedExceedsLimitSamePathMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedExceedsLimitSamePathMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedExceedsLimitSamePathMsg".into()
    }
}
/// I054
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SeedExceedsLimitAndPathChanged {
    #[prost(string, tag = "1")]
    pub package_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for SeedExceedsLimitAndPathChanged {
    const NAME: &'static str = "SeedExceedsLimitAndPathChanged";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedExceedsLimitAndPathChanged".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedExceedsLimitAndPathChanged".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeedExceedsLimitAndPathChangedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SeedExceedsLimitAndPathChanged>,
}
impl ::prost::Name for SeedExceedsLimitAndPathChangedMsg {
    const NAME: &'static str = "SeedExceedsLimitAndPathChangedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedExceedsLimitAndPathChangedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedExceedsLimitAndPathChangedMsg".into()
    }
}
/// I055
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SeedExceedsLimitChecksumChanged {
    #[prost(string, tag = "1")]
    pub package_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub checksum_name: ::prost::alloc::string::String,
}
impl ::prost::Name for SeedExceedsLimitChecksumChanged {
    const NAME: &'static str = "SeedExceedsLimitChecksumChanged";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedExceedsLimitChecksumChanged".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedExceedsLimitChecksumChanged".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeedExceedsLimitChecksumChangedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SeedExceedsLimitChecksumChanged>,
}
impl ::prost::Name for SeedExceedsLimitChecksumChangedMsg {
    const NAME: &'static str = "SeedExceedsLimitChecksumChangedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedExceedsLimitChecksumChangedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedExceedsLimitChecksumChangedMsg".into()
    }
}
/// I056
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UnusedTables {
    #[prost(string, repeated, tag = "1")]
    pub unused_tables: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for UnusedTables {
    const NAME: &'static str = "UnusedTables";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnusedTables".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnusedTables".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnusedTablesMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<UnusedTables>,
}
impl ::prost::Name for UnusedTablesMsg {
    const NAME: &'static str = "UnusedTablesMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnusedTablesMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnusedTablesMsg".into()
    }
}
/// I057
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WrongResourceSchemaFile {
    #[prost(string, tag = "1")]
    pub patch_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub resource_type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub plural_resource_type: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub yaml_key: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub file_path: ::prost::alloc::string::String,
}
impl ::prost::Name for WrongResourceSchemaFile {
    const NAME: &'static str = "WrongResourceSchemaFile";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.WrongResourceSchemaFile".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.WrongResourceSchemaFile".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WrongResourceSchemaFileMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<WrongResourceSchemaFile>,
}
impl ::prost::Name for WrongResourceSchemaFileMsg {
    const NAME: &'static str = "WrongResourceSchemaFileMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.WrongResourceSchemaFileMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.WrongResourceSchemaFileMsg".into()
    }
}
/// I058
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NoNodeForYamlKey {
    #[prost(string, tag = "1")]
    pub patch_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub yaml_key: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub file_path: ::prost::alloc::string::String,
}
impl ::prost::Name for NoNodeForYamlKey {
    const NAME: &'static str = "NoNodeForYamlKey";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NoNodeForYamlKey".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NoNodeForYamlKey".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoNodeForYamlKeyMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NoNodeForYamlKey>,
}
impl ::prost::Name for NoNodeForYamlKeyMsg {
    const NAME: &'static str = "NoNodeForYamlKeyMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NoNodeForYamlKeyMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NoNodeForYamlKeyMsg".into()
    }
}
/// I059
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MacroNotFoundForPatch {
    #[prost(string, tag = "1")]
    pub patch_name: ::prost::alloc::string::String,
}
impl ::prost::Name for MacroNotFoundForPatch {
    const NAME: &'static str = "MacroNotFoundForPatch";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MacroNotFoundForPatch".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MacroNotFoundForPatch".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MacroNotFoundForPatchMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MacroNotFoundForPatch>,
}
impl ::prost::Name for MacroNotFoundForPatchMsg {
    const NAME: &'static str = "MacroNotFoundForPatchMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MacroNotFoundForPatchMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MacroNotFoundForPatchMsg".into()
    }
}
/// I060
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NodeNotFoundOrDisabled {
    #[prost(string, tag = "1")]
    pub original_file_path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub resource_type_title: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub target_name: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub target_kind: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub target_package: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub disabled: ::prost::alloc::string::String,
}
impl ::prost::Name for NodeNotFoundOrDisabled {
    const NAME: &'static str = "NodeNotFoundOrDisabled";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeNotFoundOrDisabled".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeNotFoundOrDisabled".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeNotFoundOrDisabledMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NodeNotFoundOrDisabled>,
}
impl ::prost::Name for NodeNotFoundOrDisabledMsg {
    const NAME: &'static str = "NodeNotFoundOrDisabledMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeNotFoundOrDisabledMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeNotFoundOrDisabledMsg".into()
    }
}
/// I061
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JinjaLogWarning {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for JinjaLogWarning {
    const NAME: &'static str = "JinjaLogWarning";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.JinjaLogWarning".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.JinjaLogWarning".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JinjaLogWarningMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<JinjaLogWarning>,
}
impl ::prost::Name for JinjaLogWarningMsg {
    const NAME: &'static str = "JinjaLogWarningMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.JinjaLogWarningMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.JinjaLogWarningMsg".into()
    }
}
/// I062
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JinjaLogInfo {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for JinjaLogInfo {
    const NAME: &'static str = "JinjaLogInfo";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.JinjaLogInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.JinjaLogInfo".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JinjaLogInfoMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<JinjaLogInfo>,
}
impl ::prost::Name for JinjaLogInfoMsg {
    const NAME: &'static str = "JinjaLogInfoMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.JinjaLogInfoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.JinjaLogInfoMsg".into()
    }
}
/// I063
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JinjaLogDebug {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for JinjaLogDebug {
    const NAME: &'static str = "JinjaLogDebug";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.JinjaLogDebug".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.JinjaLogDebug".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JinjaLogDebugMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<JinjaLogDebug>,
}
impl ::prost::Name for JinjaLogDebugMsg {
    const NAME: &'static str = "JinjaLogDebugMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.JinjaLogDebugMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.JinjaLogDebugMsg".into()
    }
}
/// I064
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnpinnedRefNewVersionAvailable {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub ref_node_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ref_node_package: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ref_node_version: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub ref_max_version: ::prost::alloc::string::String,
}
impl ::prost::Name for UnpinnedRefNewVersionAvailable {
    const NAME: &'static str = "UnpinnedRefNewVersionAvailable";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnpinnedRefNewVersionAvailable".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnpinnedRefNewVersionAvailable".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnpinnedRefNewVersionAvailableMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<UnpinnedRefNewVersionAvailable>,
}
impl ::prost::Name for UnpinnedRefNewVersionAvailableMsg {
    const NAME: &'static str = "UnpinnedRefNewVersionAvailableMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnpinnedRefNewVersionAvailableMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnpinnedRefNewVersionAvailableMsg".into()
    }
}
/// I066
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpcomingReferenceDeprecation {
    #[prost(string, tag = "1")]
    pub model_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub ref_model_package: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ref_model_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ref_model_version: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub ref_model_latest_version: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub ref_model_deprecation_date: ::prost::alloc::string::String,
}
impl ::prost::Name for UpcomingReferenceDeprecation {
    const NAME: &'static str = "UpcomingReferenceDeprecation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UpcomingReferenceDeprecation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UpcomingReferenceDeprecation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpcomingReferenceDeprecationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<UpcomingReferenceDeprecation>,
}
impl ::prost::Name for UpcomingReferenceDeprecationMsg {
    const NAME: &'static str = "UpcomingReferenceDeprecationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UpcomingReferenceDeprecationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UpcomingReferenceDeprecationMsg".into()
    }
}
/// I067
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeprecatedReference {
    #[prost(string, tag = "1")]
    pub model_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub ref_model_package: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ref_model_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ref_model_version: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub ref_model_latest_version: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub ref_model_deprecation_date: ::prost::alloc::string::String,
}
impl ::prost::Name for DeprecatedReference {
    const NAME: &'static str = "DeprecatedReference";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DeprecatedReference".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DeprecatedReference".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeprecatedReferenceMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DeprecatedReference>,
}
impl ::prost::Name for DeprecatedReferenceMsg {
    const NAME: &'static str = "DeprecatedReferenceMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DeprecatedReferenceMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DeprecatedReferenceMsg".into()
    }
}
/// I068
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UnsupportedConstraintMaterialization {
    #[prost(string, tag = "1")]
    pub materialized: ::prost::alloc::string::String,
}
impl ::prost::Name for UnsupportedConstraintMaterialization {
    const NAME: &'static str = "UnsupportedConstraintMaterialization";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnsupportedConstraintMaterialization".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnsupportedConstraintMaterialization".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnsupportedConstraintMaterializationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<UnsupportedConstraintMaterialization>,
}
impl ::prost::Name for UnsupportedConstraintMaterializationMsg {
    const NAME: &'static str = "UnsupportedConstraintMaterializationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnsupportedConstraintMaterializationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnsupportedConstraintMaterializationMsg".into()
    }
}
/// I069
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParseInlineNodeError {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub exc: ::prost::alloc::string::String,
}
impl ::prost::Name for ParseInlineNodeError {
    const NAME: &'static str = "ParseInlineNodeError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ParseInlineNodeError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ParseInlineNodeError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParseInlineNodeErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ParseInlineNodeError>,
}
impl ::prost::Name for ParseInlineNodeErrorMsg {
    const NAME: &'static str = "ParseInlineNodeErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ParseInlineNodeErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ParseInlineNodeErrorMsg".into()
    }
}
/// I070
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SemanticValidationFailure {
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for SemanticValidationFailure {
    const NAME: &'static str = "SemanticValidationFailure";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SemanticValidationFailure".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SemanticValidationFailure".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SemanticValidationFailureMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SemanticValidationFailure>,
}
impl ::prost::Name for SemanticValidationFailureMsg {
    const NAME: &'static str = "SemanticValidationFailureMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SemanticValidationFailureMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SemanticValidationFailureMsg".into()
    }
}
/// I071
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnversionedBreakingChange {
    #[prost(string, repeated, tag = "1")]
    pub breaking_changes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub model_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub model_file_path: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub contract_enforced_disabled: bool,
    #[prost(string, repeated, tag = "5")]
    pub columns_removed: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "6")]
    pub column_type_changes: ::prost::alloc::vec::Vec<ColumnType>,
    #[prost(message, repeated, tag = "7")]
    pub enforced_column_constraint_removed: ::prost::alloc::vec::Vec<ColumnConstraint>,
    #[prost(message, repeated, tag = "8")]
    pub enforced_model_constraint_removed: ::prost::alloc::vec::Vec<ModelConstraint>,
    #[prost(string, repeated, tag = "9")]
    pub materialization_changed: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for UnversionedBreakingChange {
    const NAME: &'static str = "UnversionedBreakingChange";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnversionedBreakingChange".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnversionedBreakingChange".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnversionedBreakingChangeMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<UnversionedBreakingChange>,
}
impl ::prost::Name for UnversionedBreakingChangeMsg {
    const NAME: &'static str = "UnversionedBreakingChangeMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.UnversionedBreakingChangeMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.UnversionedBreakingChangeMsg".into()
    }
}
/// I072
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WarnStateTargetEqual {
    #[prost(string, tag = "1")]
    pub state_path: ::prost::alloc::string::String,
}
impl ::prost::Name for WarnStateTargetEqual {
    const NAME: &'static str = "WarnStateTargetEqual";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.WarnStateTargetEqual".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.WarnStateTargetEqual".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WarnStateTargetEqualMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<WarnStateTargetEqual>,
}
impl ::prost::Name for WarnStateTargetEqualMsg {
    const NAME: &'static str = "WarnStateTargetEqualMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.WarnStateTargetEqualMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.WarnStateTargetEqualMsg".into()
    }
}
/// I073
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FreshnessConfigProblem {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for FreshnessConfigProblem {
    const NAME: &'static str = "FreshnessConfigProblem";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FreshnessConfigProblem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FreshnessConfigProblem".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreshnessConfigProblemMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<FreshnessConfigProblem>,
}
impl ::prost::Name for FreshnessConfigProblemMsg {
    const NAME: &'static str = "FreshnessConfigProblemMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FreshnessConfigProblemMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FreshnessConfigProblemMsg".into()
    }
}
/// I074
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MicrobatchModelNoEventTimeInputs {
    #[prost(string, tag = "1")]
    pub model_name: ::prost::alloc::string::String,
}
impl ::prost::Name for MicrobatchModelNoEventTimeInputs {
    const NAME: &'static str = "MicrobatchModelNoEventTimeInputs";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MicrobatchModelNoEventTimeInputs".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MicrobatchModelNoEventTimeInputs".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MicrobatchModelNoEventTimeInputsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MicrobatchModelNoEventTimeInputs>,
}
impl ::prost::Name for MicrobatchModelNoEventTimeInputsMsg {
    const NAME: &'static str = "MicrobatchModelNoEventTimeInputsMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MicrobatchModelNoEventTimeInputsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MicrobatchModelNoEventTimeInputsMsg".into()
    }
}
/// I075
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InvalidConcurrentBatchesConfig {
    #[prost(int32, tag = "1")]
    pub num_models: i32,
    #[prost(string, tag = "2")]
    pub adapter_type: ::prost::alloc::string::String,
}
impl ::prost::Name for InvalidConcurrentBatchesConfig {
    const NAME: &'static str = "InvalidConcurrentBatchesConfig";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidConcurrentBatchesConfig".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidConcurrentBatchesConfig".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvalidConcurrentBatchesConfigMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InvalidConcurrentBatchesConfig>,
}
impl ::prost::Name for InvalidConcurrentBatchesConfigMsg {
    const NAME: &'static str = "InvalidConcurrentBatchesConfigMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidConcurrentBatchesConfigMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidConcurrentBatchesConfigMsg".into()
    }
}
/// I076
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InvalidMacroAnnotation {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub macro_unique_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub macro_file_path: ::prost::alloc::string::String,
}
impl ::prost::Name for InvalidMacroAnnotation {
    const NAME: &'static str = "InvalidMacroAnnotation";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidMacroAnnotation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidMacroAnnotation".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvalidMacroAnnotationMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InvalidMacroAnnotation>,
}
impl ::prost::Name for InvalidMacroAnnotationMsg {
    const NAME: &'static str = "InvalidMacroAnnotationMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InvalidMacroAnnotationMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InvalidMacroAnnotationMsg".into()
    }
}
/// M001
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitSparseCheckoutSubdirectory {
    #[prost(string, tag = "1")]
    pub subdir: ::prost::alloc::string::String,
}
impl ::prost::Name for GitSparseCheckoutSubdirectory {
    const NAME: &'static str = "GitSparseCheckoutSubdirectory";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitSparseCheckoutSubdirectory".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitSparseCheckoutSubdirectory".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitSparseCheckoutSubdirectoryMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<GitSparseCheckoutSubdirectory>,
}
impl ::prost::Name for GitSparseCheckoutSubdirectoryMsg {
    const NAME: &'static str = "GitSparseCheckoutSubdirectoryMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitSparseCheckoutSubdirectoryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitSparseCheckoutSubdirectoryMsg".into()
    }
}
/// M002
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitProgressCheckoutRevision {
    #[prost(string, tag = "1")]
    pub revision: ::prost::alloc::string::String,
}
impl ::prost::Name for GitProgressCheckoutRevision {
    const NAME: &'static str = "GitProgressCheckoutRevision";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressCheckoutRevision".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressCheckoutRevision".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitProgressCheckoutRevisionMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<GitProgressCheckoutRevision>,
}
impl ::prost::Name for GitProgressCheckoutRevisionMsg {
    const NAME: &'static str = "GitProgressCheckoutRevisionMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressCheckoutRevisionMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressCheckoutRevisionMsg".into()
    }
}
/// M003
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitProgressUpdatingExistingDependency {
    #[prost(string, tag = "1")]
    pub dir: ::prost::alloc::string::String,
}
impl ::prost::Name for GitProgressUpdatingExistingDependency {
    const NAME: &'static str = "GitProgressUpdatingExistingDependency";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressUpdatingExistingDependency".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressUpdatingExistingDependency".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitProgressUpdatingExistingDependencyMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<GitProgressUpdatingExistingDependency>,
}
impl ::prost::Name for GitProgressUpdatingExistingDependencyMsg {
    const NAME: &'static str = "GitProgressUpdatingExistingDependencyMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressUpdatingExistingDependencyMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressUpdatingExistingDependencyMsg".into()
    }
}
/// M004
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitProgressPullingNewDependency {
    #[prost(string, tag = "1")]
    pub dir: ::prost::alloc::string::String,
}
impl ::prost::Name for GitProgressPullingNewDependency {
    const NAME: &'static str = "GitProgressPullingNewDependency";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressPullingNewDependency".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressPullingNewDependency".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitProgressPullingNewDependencyMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<GitProgressPullingNewDependency>,
}
impl ::prost::Name for GitProgressPullingNewDependencyMsg {
    const NAME: &'static str = "GitProgressPullingNewDependencyMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressPullingNewDependencyMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressPullingNewDependencyMsg".into()
    }
}
/// M005
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitNothingToDo {
    #[prost(string, tag = "1")]
    pub sha: ::prost::alloc::string::String,
}
impl ::prost::Name for GitNothingToDo {
    const NAME: &'static str = "GitNothingToDo";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitNothingToDo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitNothingToDo".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitNothingToDoMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<GitNothingToDo>,
}
impl ::prost::Name for GitNothingToDoMsg {
    const NAME: &'static str = "GitNothingToDoMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitNothingToDoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitNothingToDoMsg".into()
    }
}
/// M006
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitProgressUpdatedCheckoutRange {
    #[prost(string, tag = "1")]
    pub start_sha: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub end_sha: ::prost::alloc::string::String,
}
impl ::prost::Name for GitProgressUpdatedCheckoutRange {
    const NAME: &'static str = "GitProgressUpdatedCheckoutRange";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressUpdatedCheckoutRange".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressUpdatedCheckoutRange".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitProgressUpdatedCheckoutRangeMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<GitProgressUpdatedCheckoutRange>,
}
impl ::prost::Name for GitProgressUpdatedCheckoutRangeMsg {
    const NAME: &'static str = "GitProgressUpdatedCheckoutRangeMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressUpdatedCheckoutRangeMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressUpdatedCheckoutRangeMsg".into()
    }
}
/// M007
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GitProgressCheckedOutAt {
    #[prost(string, tag = "1")]
    pub end_sha: ::prost::alloc::string::String,
}
impl ::prost::Name for GitProgressCheckedOutAt {
    const NAME: &'static str = "GitProgressCheckedOutAt";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressCheckedOutAt".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressCheckedOutAt".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitProgressCheckedOutAtMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<GitProgressCheckedOutAt>,
}
impl ::prost::Name for GitProgressCheckedOutAtMsg {
    const NAME: &'static str = "GitProgressCheckedOutAtMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GitProgressCheckedOutAtMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GitProgressCheckedOutAtMsg".into()
    }
}
/// M008
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegistryProgressGetRequest {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
}
impl ::prost::Name for RegistryProgressGetRequest {
    const NAME: &'static str = "RegistryProgressGETRequest";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryProgressGETRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryProgressGETRequest".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryProgressGetRequestMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RegistryProgressGetRequest>,
}
impl ::prost::Name for RegistryProgressGetRequestMsg {
    const NAME: &'static str = "RegistryProgressGETRequestMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryProgressGETRequestMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryProgressGETRequestMsg".into()
    }
}
/// M009
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegistryProgressGetResponse {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub resp_code: i32,
}
impl ::prost::Name for RegistryProgressGetResponse {
    const NAME: &'static str = "RegistryProgressGETResponse";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryProgressGETResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryProgressGETResponse".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryProgressGetResponseMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RegistryProgressGetResponse>,
}
impl ::prost::Name for RegistryProgressGetResponseMsg {
    const NAME: &'static str = "RegistryProgressGETResponseMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryProgressGETResponseMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryProgressGETResponseMsg".into()
    }
}
/// M010
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SelectorReportInvalidSelector {
    #[prost(string, tag = "1")]
    pub valid_selectors: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub spec_method: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub raw_spec: ::prost::alloc::string::String,
}
impl ::prost::Name for SelectorReportInvalidSelector {
    const NAME: &'static str = "SelectorReportInvalidSelector";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SelectorReportInvalidSelector".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SelectorReportInvalidSelector".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SelectorReportInvalidSelectorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SelectorReportInvalidSelector>,
}
impl ::prost::Name for SelectorReportInvalidSelectorMsg {
    const NAME: &'static str = "SelectorReportInvalidSelectorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SelectorReportInvalidSelectorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SelectorReportInvalidSelectorMsg".into()
    }
}
/// M013
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsNoPackagesFound {}
impl ::prost::Name for DepsNoPackagesFound {
    const NAME: &'static str = "DepsNoPackagesFound";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsNoPackagesFound".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsNoPackagesFound".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsNoPackagesFoundMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsNoPackagesFound>,
}
impl ::prost::Name for DepsNoPackagesFoundMsg {
    const NAME: &'static str = "DepsNoPackagesFoundMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsNoPackagesFoundMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsNoPackagesFoundMsg".into()
    }
}
/// M014
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsStartPackageInstall {
    #[prost(string, tag = "1")]
    pub package_name: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsStartPackageInstall {
    const NAME: &'static str = "DepsStartPackageInstall";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsStartPackageInstall".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsStartPackageInstall".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsStartPackageInstallMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsStartPackageInstall>,
}
impl ::prost::Name for DepsStartPackageInstallMsg {
    const NAME: &'static str = "DepsStartPackageInstallMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsStartPackageInstallMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsStartPackageInstallMsg".into()
    }
}
/// M015
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsInstallInfo {
    #[prost(string, tag = "1")]
    pub version_name: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsInstallInfo {
    const NAME: &'static str = "DepsInstallInfo";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsInstallInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsInstallInfo".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsInstallInfoMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsInstallInfo>,
}
impl ::prost::Name for DepsInstallInfoMsg {
    const NAME: &'static str = "DepsInstallInfoMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsInstallInfoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsInstallInfoMsg".into()
    }
}
/// M016
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsUpdateAvailable {
    #[prost(string, tag = "1")]
    pub version_latest: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsUpdateAvailable {
    const NAME: &'static str = "DepsUpdateAvailable";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsUpdateAvailable".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsUpdateAvailable".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsUpdateAvailableMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsUpdateAvailable>,
}
impl ::prost::Name for DepsUpdateAvailableMsg {
    const NAME: &'static str = "DepsUpdateAvailableMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsUpdateAvailableMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsUpdateAvailableMsg".into()
    }
}
/// M017
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsUpToDate {}
impl ::prost::Name for DepsUpToDate {
    const NAME: &'static str = "DepsUpToDate";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsUpToDate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsUpToDate".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsUpToDateMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsUpToDate>,
}
impl ::prost::Name for DepsUpToDateMsg {
    const NAME: &'static str = "DepsUpToDateMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsUpToDateMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsUpToDateMsg".into()
    }
}
/// M018
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsListSubdirectory {
    #[prost(string, tag = "1")]
    pub subdirectory: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsListSubdirectory {
    const NAME: &'static str = "DepsListSubdirectory";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsListSubdirectory".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsListSubdirectory".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsListSubdirectoryMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsListSubdirectory>,
}
impl ::prost::Name for DepsListSubdirectoryMsg {
    const NAME: &'static str = "DepsListSubdirectoryMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsListSubdirectoryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsListSubdirectoryMsg".into()
    }
}
/// M019
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsNotifyUpdatesAvailable {
    #[prost(string, repeated, tag = "1")]
    pub packages: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for DepsNotifyUpdatesAvailable {
    const NAME: &'static str = "DepsNotifyUpdatesAvailable";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsNotifyUpdatesAvailable".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsNotifyUpdatesAvailable".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsNotifyUpdatesAvailableMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsNotifyUpdatesAvailable>,
}
impl ::prost::Name for DepsNotifyUpdatesAvailableMsg {
    const NAME: &'static str = "DepsNotifyUpdatesAvailableMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsNotifyUpdatesAvailableMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsNotifyUpdatesAvailableMsg".into()
    }
}
/// M022
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegistryIndexProgressGetRequest {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
}
impl ::prost::Name for RegistryIndexProgressGetRequest {
    const NAME: &'static str = "RegistryIndexProgressGETRequest";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryIndexProgressGETRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryIndexProgressGETRequest".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryIndexProgressGetRequestMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RegistryIndexProgressGetRequest>,
}
impl ::prost::Name for RegistryIndexProgressGetRequestMsg {
    const NAME: &'static str = "RegistryIndexProgressGETRequestMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryIndexProgressGETRequestMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryIndexProgressGETRequestMsg".into()
    }
}
/// M023
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegistryIndexProgressGetResponse {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub resp_code: i32,
}
impl ::prost::Name for RegistryIndexProgressGetResponse {
    const NAME: &'static str = "RegistryIndexProgressGETResponse";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryIndexProgressGETResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryIndexProgressGETResponse".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryIndexProgressGetResponseMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RegistryIndexProgressGetResponse>,
}
impl ::prost::Name for RegistryIndexProgressGetResponseMsg {
    const NAME: &'static str = "RegistryIndexProgressGETResponseMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryIndexProgressGETResponseMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryIndexProgressGETResponseMsg".into()
    }
}
/// M024
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegistryResponseUnexpectedType {
    #[prost(string, tag = "1")]
    pub response: ::prost::alloc::string::String,
}
impl ::prost::Name for RegistryResponseUnexpectedType {
    const NAME: &'static str = "RegistryResponseUnexpectedType";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryResponseUnexpectedType".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryResponseUnexpectedType".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryResponseUnexpectedTypeMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RegistryResponseUnexpectedType>,
}
impl ::prost::Name for RegistryResponseUnexpectedTypeMsg {
    const NAME: &'static str = "RegistryResponseUnexpectedTypeMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryResponseUnexpectedTypeMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryResponseUnexpectedTypeMsg".into()
    }
}
/// M025
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegistryResponseMissingTopKeys {
    #[prost(string, tag = "1")]
    pub response: ::prost::alloc::string::String,
}
impl ::prost::Name for RegistryResponseMissingTopKeys {
    const NAME: &'static str = "RegistryResponseMissingTopKeys";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryResponseMissingTopKeys".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryResponseMissingTopKeys".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryResponseMissingTopKeysMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RegistryResponseMissingTopKeys>,
}
impl ::prost::Name for RegistryResponseMissingTopKeysMsg {
    const NAME: &'static str = "RegistryResponseMissingTopKeysMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryResponseMissingTopKeysMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryResponseMissingTopKeysMsg".into()
    }
}
/// M026
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegistryResponseMissingNestedKeys {
    #[prost(string, tag = "1")]
    pub response: ::prost::alloc::string::String,
}
impl ::prost::Name for RegistryResponseMissingNestedKeys {
    const NAME: &'static str = "RegistryResponseMissingNestedKeys";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryResponseMissingNestedKeys".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryResponseMissingNestedKeys".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryResponseMissingNestedKeysMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RegistryResponseMissingNestedKeys>,
}
impl ::prost::Name for RegistryResponseMissingNestedKeysMsg {
    const NAME: &'static str = "RegistryResponseMissingNestedKeysMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryResponseMissingNestedKeysMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryResponseMissingNestedKeysMsg".into()
    }
}
/// M027
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RegistryResponseExtraNestedKeys {
    #[prost(string, tag = "1")]
    pub response: ::prost::alloc::string::String,
}
impl ::prost::Name for RegistryResponseExtraNestedKeys {
    const NAME: &'static str = "RegistryResponseExtraNestedKeys";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryResponseExtraNestedKeys".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryResponseExtraNestedKeys".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryResponseExtraNestedKeysMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RegistryResponseExtraNestedKeys>,
}
impl ::prost::Name for RegistryResponseExtraNestedKeysMsg {
    const NAME: &'static str = "RegistryResponseExtraNestedKeysMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RegistryResponseExtraNestedKeysMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RegistryResponseExtraNestedKeysMsg".into()
    }
}
/// M028
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsSetDownloadDirectory {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsSetDownloadDirectory {
    const NAME: &'static str = "DepsSetDownloadDirectory";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsSetDownloadDirectory".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsSetDownloadDirectory".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsSetDownloadDirectoryMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsSetDownloadDirectory>,
}
impl ::prost::Name for DepsSetDownloadDirectoryMsg {
    const NAME: &'static str = "DepsSetDownloadDirectoryMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsSetDownloadDirectoryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsSetDownloadDirectoryMsg".into()
    }
}
/// M029
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsUnpinned {
    #[prost(string, tag = "1")]
    pub revision: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub git: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsUnpinned {
    const NAME: &'static str = "DepsUnpinned";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsUnpinned".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsUnpinned".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsUnpinnedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsUnpinned>,
}
impl ::prost::Name for DepsUnpinnedMsg {
    const NAME: &'static str = "DepsUnpinnedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsUnpinnedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsUnpinnedMsg".into()
    }
}
/// M030
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NoNodesForSelectionCriteria {
    #[prost(string, tag = "1")]
    pub spec_raw: ::prost::alloc::string::String,
}
impl ::prost::Name for NoNodesForSelectionCriteria {
    const NAME: &'static str = "NoNodesForSelectionCriteria";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NoNodesForSelectionCriteria".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NoNodesForSelectionCriteria".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoNodesForSelectionCriteriaMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NoNodesForSelectionCriteria>,
}
impl ::prost::Name for NoNodesForSelectionCriteriaMsg {
    const NAME: &'static str = "NoNodesForSelectionCriteriaMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NoNodesForSelectionCriteriaMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NoNodesForSelectionCriteriaMsg".into()
    }
}
/// M031
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsLockUpdating {
    #[prost(string, tag = "1")]
    pub lock_filepath: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsLockUpdating {
    const NAME: &'static str = "DepsLockUpdating";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsLockUpdating".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsLockUpdating".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsLockUpdatingMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsLockUpdating>,
}
impl ::prost::Name for DepsLockUpdatingMsg {
    const NAME: &'static str = "DepsLockUpdatingMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsLockUpdatingMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsLockUpdatingMsg".into()
    }
}
/// M032
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsAddPackage {
    #[prost(string, tag = "1")]
    pub package_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub packages_filepath: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsAddPackage {
    const NAME: &'static str = "DepsAddPackage";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsAddPackage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsAddPackage".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsAddPackageMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsAddPackage>,
}
impl ::prost::Name for DepsAddPackageMsg {
    const NAME: &'static str = "DepsAddPackageMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsAddPackageMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsAddPackageMsg".into()
    }
}
/// M033
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsFoundDuplicatePackage {
    #[prost(map = "string, string", tag = "1")]
    pub removed_package: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for DepsFoundDuplicatePackage {
    const NAME: &'static str = "DepsFoundDuplicatePackage";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsFoundDuplicatePackage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsFoundDuplicatePackage".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsFoundDuplicatePackageMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsFoundDuplicatePackage>,
}
impl ::prost::Name for DepsFoundDuplicatePackageMsg {
    const NAME: &'static str = "DepsFoundDuplicatePackageMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsFoundDuplicatePackageMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsFoundDuplicatePackageMsg".into()
    }
}
/// M034
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsVersionMissing {
    #[prost(string, tag = "1")]
    pub source: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsVersionMissing {
    const NAME: &'static str = "DepsVersionMissing";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsVersionMissing".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsVersionMissing".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsVersionMissingMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsVersionMissing>,
}
impl ::prost::Name for DepsVersionMissingMsg {
    const NAME: &'static str = "DepsVersionMissingMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsVersionMissingMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsVersionMissingMsg".into()
    }
}
/// M035
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsScrubbedPackageName {
    #[prost(string, tag = "1")]
    pub package_name: ::prost::alloc::string::String,
}
impl ::prost::Name for DepsScrubbedPackageName {
    const NAME: &'static str = "DepsScrubbedPackageName";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsScrubbedPackageName".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsScrubbedPackageName".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsScrubbedPackageNameMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsScrubbedPackageName>,
}
impl ::prost::Name for DepsScrubbedPackageNameMsg {
    const NAME: &'static str = "DepsScrubbedPackageNameMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsScrubbedPackageNameMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsScrubbedPackageNameMsg".into()
    }
}
/// P001
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ArtifactWritten {
    #[prost(string, tag = "1")]
    pub artifact_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub artifact_path: ::prost::alloc::string::String,
}
impl ::prost::Name for ArtifactWritten {
    const NAME: &'static str = "ArtifactWritten";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArtifactWritten".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArtifactWritten".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArtifactWrittenMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ArtifactWritten>,
}
impl ::prost::Name for ArtifactWrittenMsg {
    const NAME: &'static str = "ArtifactWrittenMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArtifactWrittenMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArtifactWrittenMsg".into()
    }
}
/// Q001
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RunningOperationCaughtError {
    #[prost(string, tag = "1")]
    pub exc: ::prost::alloc::string::String,
}
impl ::prost::Name for RunningOperationCaughtError {
    const NAME: &'static str = "RunningOperationCaughtError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunningOperationCaughtError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunningOperationCaughtError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunningOperationCaughtErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RunningOperationCaughtError>,
}
impl ::prost::Name for RunningOperationCaughtErrorMsg {
    const NAME: &'static str = "RunningOperationCaughtErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunningOperationCaughtErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunningOperationCaughtErrorMsg".into()
    }
}
/// Q002
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CompileComplete {}
impl ::prost::Name for CompileComplete {
    const NAME: &'static str = "CompileComplete";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CompileComplete".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CompileComplete".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompileCompleteMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CompileComplete>,
}
impl ::prost::Name for CompileCompleteMsg {
    const NAME: &'static str = "CompileCompleteMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CompileCompleteMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CompileCompleteMsg".into()
    }
}
/// Q003
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FreshnessCheckComplete {}
impl ::prost::Name for FreshnessCheckComplete {
    const NAME: &'static str = "FreshnessCheckComplete";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FreshnessCheckComplete".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FreshnessCheckComplete".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FreshnessCheckCompleteMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<FreshnessCheckComplete>,
}
impl ::prost::Name for FreshnessCheckCompleteMsg {
    const NAME: &'static str = "FreshnessCheckCompleteMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FreshnessCheckCompleteMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FreshnessCheckCompleteMsg".into()
    }
}
/// Q004
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SeedHeader {
    #[prost(string, tag = "1")]
    pub header: ::prost::alloc::string::String,
}
impl ::prost::Name for SeedHeader {
    const NAME: &'static str = "SeedHeader";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedHeader".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedHeader".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeedHeaderMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SeedHeader>,
}
impl ::prost::Name for SeedHeaderMsg {
    const NAME: &'static str = "SeedHeaderMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SeedHeaderMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SeedHeaderMsg".into()
    }
}
/// Q006
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlRunnerException {
    #[prost(string, tag = "1")]
    pub exc: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exc_info: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for SqlRunnerException {
    const NAME: &'static str = "SQLRunnerException";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SQLRunnerException".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SQLRunnerException".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlRunnerExceptionMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SqlRunnerException>,
}
impl ::prost::Name for SqlRunnerExceptionMsg {
    const NAME: &'static str = "SQLRunnerExceptionMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SQLRunnerExceptionMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SQLRunnerExceptionMsg".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Group {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub package_name: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "7")]
    pub owner: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for Group {
    const NAME: &'static str = "Group";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.Group".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.Group".into()
    }
}
/// Q007
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogTestResult {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub index: i32,
    #[prost(int32, tag = "5")]
    pub num_models: i32,
    #[prost(float, tag = "6")]
    pub execution_time: f32,
    #[prost(int32, tag = "7")]
    pub num_failures: i32,
    #[prost(message, optional, tag = "8")]
    pub group: ::core::option::Option<Group>,
    #[prost(string, tag = "9")]
    pub attached_node: ::prost::alloc::string::String,
}
impl ::prost::Name for LogTestResult {
    const NAME: &'static str = "LogTestResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogTestResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogTestResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogTestResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogTestResult>,
}
impl ::prost::Name for LogTestResultMsg {
    const NAME: &'static str = "LogTestResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogTestResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogTestResultMsg".into()
    }
}
/// Q008
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogNodeResult {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub index: i32,
    #[prost(int32, tag = "5")]
    pub total: i32,
    #[prost(float, tag = "6")]
    pub execution_time: f32,
    #[prost(string, tag = "7")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for LogNodeResult {
    const NAME: &'static str = "LogNodeResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogNodeResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogNodeResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogNodeResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogNodeResult>,
}
impl ::prost::Name for LogNodeResultMsg {
    const NAME: &'static str = "LogNodeResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogNodeResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogNodeResultMsg".into()
    }
}
/// Q011
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogStartLine {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub index: i32,
    #[prost(int32, tag = "4")]
    pub total: i32,
}
impl ::prost::Name for LogStartLine {
    const NAME: &'static str = "LogStartLine";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogStartLine".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogStartLine".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogStartLineMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogStartLine>,
}
impl ::prost::Name for LogStartLineMsg {
    const NAME: &'static str = "LogStartLineMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogStartLineMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogStartLineMsg".into()
    }
}
/// Q012
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogModelResult {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub index: i32,
    #[prost(int32, tag = "5")]
    pub total: i32,
    #[prost(float, tag = "6")]
    pub execution_time: f32,
    #[prost(message, optional, tag = "7")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for LogModelResult {
    const NAME: &'static str = "LogModelResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogModelResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogModelResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogModelResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogModelResult>,
}
impl ::prost::Name for LogModelResultMsg {
    const NAME: &'static str = "LogModelResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogModelResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogModelResultMsg".into()
    }
}
/// Q015
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogSnapshotResult {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub index: i32,
    #[prost(int32, tag = "5")]
    pub total: i32,
    #[prost(float, tag = "6")]
    pub execution_time: f32,
    #[prost(map = "string, string", tag = "7")]
    pub cfg: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "8")]
    pub result_message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for LogSnapshotResult {
    const NAME: &'static str = "LogSnapshotResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogSnapshotResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogSnapshotResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogSnapshotResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogSnapshotResult>,
}
impl ::prost::Name for LogSnapshotResultMsg {
    const NAME: &'static str = "LogSnapshotResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogSnapshotResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogSnapshotResultMsg".into()
    }
}
/// Q016
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogSeedResult {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub result_message: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub index: i32,
    #[prost(int32, tag = "5")]
    pub total: i32,
    #[prost(float, tag = "6")]
    pub execution_time: f32,
    #[prost(string, tag = "7")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub relation: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for LogSeedResult {
    const NAME: &'static str = "LogSeedResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogSeedResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogSeedResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogSeedResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogSeedResult>,
}
impl ::prost::Name for LogSeedResultMsg {
    const NAME: &'static str = "LogSeedResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogSeedResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogSeedResultMsg".into()
    }
}
/// Q018
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogFreshnessResult {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(int32, tag = "3")]
    pub index: i32,
    #[prost(int32, tag = "4")]
    pub total: i32,
    #[prost(float, tag = "5")]
    pub execution_time: f32,
    #[prost(string, tag = "6")]
    pub source_name: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub table_name: ::prost::alloc::string::String,
}
impl ::prost::Name for LogFreshnessResult {
    const NAME: &'static str = "LogFreshnessResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogFreshnessResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogFreshnessResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogFreshnessResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogFreshnessResult>,
}
impl ::prost::Name for LogFreshnessResultMsg {
    const NAME: &'static str = "LogFreshnessResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogFreshnessResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogFreshnessResultMsg".into()
    }
}
/// Q019
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogNodeNoOpResult {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub index: i32,
    #[prost(int32, tag = "5")]
    pub total: i32,
    #[prost(float, tag = "6")]
    pub execution_time: f32,
}
impl ::prost::Name for LogNodeNoOpResult {
    const NAME: &'static str = "LogNodeNoOpResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogNodeNoOpResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogNodeNoOpResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogNodeNoOpResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogNodeNoOpResult>,
}
impl ::prost::Name for LogNodeNoOpResultMsg {
    const NAME: &'static str = "LogNodeNoOpResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogNodeNoOpResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogNodeNoOpResultMsg".into()
    }
}
/// Q022
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LogCancelLine {
    #[prost(string, tag = "1")]
    pub conn_name: ::prost::alloc::string::String,
}
impl ::prost::Name for LogCancelLine {
    const NAME: &'static str = "LogCancelLine";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogCancelLine".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogCancelLine".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogCancelLineMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogCancelLine>,
}
impl ::prost::Name for LogCancelLineMsg {
    const NAME: &'static str = "LogCancelLineMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogCancelLineMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogCancelLineMsg".into()
    }
}
/// Q023
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DefaultSelector {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for DefaultSelector {
    const NAME: &'static str = "DefaultSelector";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DefaultSelector".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DefaultSelector".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DefaultSelectorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DefaultSelector>,
}
impl ::prost::Name for DefaultSelectorMsg {
    const NAME: &'static str = "DefaultSelectorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DefaultSelectorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DefaultSelectorMsg".into()
    }
}
/// Q024
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeStart {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for NodeStart {
    const NAME: &'static str = "NodeStart";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeStart".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeStart".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeStartMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NodeStart>,
}
impl ::prost::Name for NodeStartMsg {
    const NAME: &'static str = "NodeStartMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeStartMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeStartMsg".into()
    }
}
/// Q025
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeFinished {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(message, optional, tag = "2")]
    pub run_result: ::core::option::Option<RunResultMsg>,
}
impl ::prost::Name for NodeFinished {
    const NAME: &'static str = "NodeFinished";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeFinished".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeFinished".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeFinishedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NodeFinished>,
}
impl ::prost::Name for NodeFinishedMsg {
    const NAME: &'static str = "NodeFinishedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeFinishedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeFinishedMsg".into()
    }
}
/// Q026
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryCancelationUnsupported {
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryCancelationUnsupported {
    const NAME: &'static str = "QueryCancelationUnsupported";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.QueryCancelationUnsupported".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.QueryCancelationUnsupported".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCancelationUnsupportedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<QueryCancelationUnsupported>,
}
impl ::prost::Name for QueryCancelationUnsupportedMsg {
    const NAME: &'static str = "QueryCancelationUnsupportedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.QueryCancelationUnsupportedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.QueryCancelationUnsupportedMsg".into()
    }
}
/// Q027
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConcurrencyLine {
    #[prost(int32, tag = "1")]
    pub num_threads: i32,
    #[prost(string, tag = "2")]
    pub target_name: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub node_count: i32,
}
impl ::prost::Name for ConcurrencyLine {
    const NAME: &'static str = "ConcurrencyLine";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConcurrencyLine".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConcurrencyLine".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConcurrencyLineMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConcurrencyLine>,
}
impl ::prost::Name for ConcurrencyLineMsg {
    const NAME: &'static str = "ConcurrencyLineMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConcurrencyLineMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConcurrencyLineMsg".into()
    }
}
/// Q029
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WritingInjectedSqlForNode {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for WritingInjectedSqlForNode {
    const NAME: &'static str = "WritingInjectedSQLForNode";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.WritingInjectedSQLForNode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.WritingInjectedSQLForNode".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WritingInjectedSqlForNodeMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<WritingInjectedSqlForNode>,
}
impl ::prost::Name for WritingInjectedSqlForNodeMsg {
    const NAME: &'static str = "WritingInjectedSQLForNodeMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.WritingInjectedSQLForNodeMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.WritingInjectedSQLForNodeMsg".into()
    }
}
/// Q030
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeCompiling {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for NodeCompiling {
    const NAME: &'static str = "NodeCompiling";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeCompiling".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeCompiling".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeCompilingMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NodeCompiling>,
}
impl ::prost::Name for NodeCompilingMsg {
    const NAME: &'static str = "NodeCompilingMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeCompilingMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeCompilingMsg".into()
    }
}
/// Q031
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeExecuting {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for NodeExecuting {
    const NAME: &'static str = "NodeExecuting";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeExecuting".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeExecuting".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeExecutingMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NodeExecuting>,
}
impl ::prost::Name for NodeExecutingMsg {
    const NAME: &'static str = "NodeExecutingMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeExecutingMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeExecutingMsg".into()
    }
}
/// Q032
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogHookStartLine {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub statement: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub index: i32,
    #[prost(int32, tag = "4")]
    pub total: i32,
}
impl ::prost::Name for LogHookStartLine {
    const NAME: &'static str = "LogHookStartLine";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogHookStartLine".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogHookStartLine".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogHookStartLineMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogHookStartLine>,
}
impl ::prost::Name for LogHookStartLineMsg {
    const NAME: &'static str = "LogHookStartLineMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogHookStartLineMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogHookStartLineMsg".into()
    }
}
/// Q033
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogHookEndLine {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub statement: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub index: i32,
    #[prost(int32, tag = "5")]
    pub total: i32,
    #[prost(float, tag = "6")]
    pub execution_time: f32,
}
impl ::prost::Name for LogHookEndLine {
    const NAME: &'static str = "LogHookEndLine";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogHookEndLine".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogHookEndLine".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogHookEndLineMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogHookEndLine>,
}
impl ::prost::Name for LogHookEndLineMsg {
    const NAME: &'static str = "LogHookEndLineMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogHookEndLineMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogHookEndLineMsg".into()
    }
}
/// Q034
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SkippingDetails {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub resource_type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub node_name: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub index: i32,
    #[prost(int32, tag = "6")]
    pub total: i32,
    #[prost(message, optional, tag = "7")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for SkippingDetails {
    const NAME: &'static str = "SkippingDetails";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SkippingDetails".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SkippingDetails".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SkippingDetailsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SkippingDetails>,
}
impl ::prost::Name for SkippingDetailsMsg {
    const NAME: &'static str = "SkippingDetailsMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SkippingDetailsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SkippingDetailsMsg".into()
    }
}
/// Q035
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NothingToDo {}
impl ::prost::Name for NothingToDo {
    const NAME: &'static str = "NothingToDo";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NothingToDo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NothingToDo".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NothingToDoMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NothingToDo>,
}
impl ::prost::Name for NothingToDoMsg {
    const NAME: &'static str = "NothingToDoMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NothingToDoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NothingToDoMsg".into()
    }
}
/// Q036
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RunningOperationUncaughtError {
    #[prost(string, tag = "1")]
    pub exc: ::prost::alloc::string::String,
}
impl ::prost::Name for RunningOperationUncaughtError {
    const NAME: &'static str = "RunningOperationUncaughtError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunningOperationUncaughtError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunningOperationUncaughtError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunningOperationUncaughtErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RunningOperationUncaughtError>,
}
impl ::prost::Name for RunningOperationUncaughtErrorMsg {
    const NAME: &'static str = "RunningOperationUncaughtErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunningOperationUncaughtErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunningOperationUncaughtErrorMsg".into()
    }
}
/// Q037
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndRunResult {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<RunResultMsg>,
    #[prost(float, tag = "2")]
    pub elapsed_time: f32,
    #[prost(message, optional, tag = "3")]
    pub generated_at: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(bool, tag = "4")]
    pub success: bool,
}
impl ::prost::Name for EndRunResult {
    const NAME: &'static str = "EndRunResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EndRunResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EndRunResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndRunResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<EndRunResult>,
}
impl ::prost::Name for EndRunResultMsg {
    const NAME: &'static str = "EndRunResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EndRunResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EndRunResultMsg".into()
    }
}
/// Q038
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NoNodesSelected {}
impl ::prost::Name for NoNodesSelected {
    const NAME: &'static str = "NoNodesSelected";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NoNodesSelected".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NoNodesSelected".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoNodesSelectedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NoNodesSelected>,
}
impl ::prost::Name for NoNodesSelectedMsg {
    const NAME: &'static str = "NoNodesSelectedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NoNodesSelectedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NoNodesSelectedMsg".into()
    }
}
/// Q039
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommandCompleted {
    #[prost(string, tag = "1")]
    pub command: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(message, optional, tag = "3")]
    pub completed_at: ::core::option::Option<::pbjson_types::Timestamp>,
    #[prost(float, tag = "4")]
    pub elapsed: f32,
}
impl ::prost::Name for CommandCompleted {
    const NAME: &'static str = "CommandCompleted";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CommandCompleted".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CommandCompleted".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommandCompletedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CommandCompleted>,
}
impl ::prost::Name for CommandCompletedMsg {
    const NAME: &'static str = "CommandCompletedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CommandCompletedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CommandCompletedMsg".into()
    }
}
/// Q041
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ShowNode {
    #[prost(string, tag = "1")]
    pub node_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub preview: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub is_inline: bool,
    #[prost(string, tag = "4")]
    pub output_format: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub quiet: bool,
}
impl ::prost::Name for ShowNode {
    const NAME: &'static str = "ShowNode";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ShowNode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ShowNode".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowNodeMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ShowNode>,
}
impl ::prost::Name for ShowNodeMsg {
    const NAME: &'static str = "ShowNodeMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ShowNodeMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ShowNodeMsg".into()
    }
}
/// Q042
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CompiledNode {
    #[prost(string, tag = "1")]
    pub node_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub compiled: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub is_inline: bool,
    #[prost(string, tag = "4")]
    pub output_format: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "6")]
    pub quiet: bool,
}
impl ::prost::Name for CompiledNode {
    const NAME: &'static str = "CompiledNode";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CompiledNode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CompiledNode".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompiledNodeMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CompiledNode>,
}
impl ::prost::Name for CompiledNodeMsg {
    const NAME: &'static str = "CompiledNodeMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CompiledNodeMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CompiledNodeMsg".into()
    }
}
/// Q043
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SnapshotTimestampWarning {
    #[prost(string, tag = "1")]
    pub snapshot_time_data_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub updated_at_data_type: ::prost::alloc::string::String,
}
impl ::prost::Name for SnapshotTimestampWarning {
    const NAME: &'static str = "SnapshotTimestampWarning";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SnapshotTimestampWarning".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SnapshotTimestampWarning".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SnapshotTimestampWarningMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SnapshotTimestampWarning>,
}
impl ::prost::Name for SnapshotTimestampWarningMsg {
    const NAME: &'static str = "SnapshotTimestampWarningMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SnapshotTimestampWarningMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SnapshotTimestampWarningMsg".into()
    }
}
/// Q044
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MicrobatchExecutionDebug {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for MicrobatchExecutionDebug {
    const NAME: &'static str = "MicrobatchExecutionDebug";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MicrobatchExecutionDebug".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MicrobatchExecutionDebug".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MicrobatchExecutionDebugMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MicrobatchExecutionDebug>,
}
impl ::prost::Name for MicrobatchExecutionDebugMsg {
    const NAME: &'static str = "MicrobatchExecutionDebugMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MicrobatchExecutionDebugMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MicrobatchExecutionDebugMsg".into()
    }
}
/// Q045
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogStartBatch {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub batch_index: i32,
    #[prost(int32, tag = "4")]
    pub total_batches: i32,
}
impl ::prost::Name for LogStartBatch {
    const NAME: &'static str = "LogStartBatch";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogStartBatch".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogStartBatch".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogStartBatchMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogStartBatch>,
}
impl ::prost::Name for LogStartBatchMsg {
    const NAME: &'static str = "LogStartBatchMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogStartBatchMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogStartBatchMsg".into()
    }
}
/// Q046
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogBatchResult {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub batch_index: i32,
    #[prost(int32, tag = "5")]
    pub total_batches: i32,
    #[prost(float, tag = "6")]
    pub execution_time: f32,
    #[prost(message, optional, tag = "7")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for LogBatchResult {
    const NAME: &'static str = "LogBatchResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogBatchResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogBatchResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogBatchResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogBatchResult>,
}
impl ::prost::Name for LogBatchResultMsg {
    const NAME: &'static str = "LogBatchResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogBatchResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogBatchResultMsg".into()
    }
}
/// Q047
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogFunctionResult {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub index: i32,
    #[prost(int32, tag = "5")]
    pub total: i32,
    #[prost(float, tag = "6")]
    pub execution_time: f32,
    #[prost(message, optional, tag = "7")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for LogFunctionResult {
    const NAME: &'static str = "LogFunctionResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogFunctionResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogFunctionResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogFunctionResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogFunctionResult>,
}
impl ::prost::Name for LogFunctionResultMsg {
    const NAME: &'static str = "LogFunctionResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogFunctionResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogFunctionResultMsg".into()
    }
}
/// W002
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CatchableExceptionOnRun {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(string, tag = "2")]
    pub exc: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub exc_info: ::prost::alloc::string::String,
}
impl ::prost::Name for CatchableExceptionOnRun {
    const NAME: &'static str = "CatchableExceptionOnRun";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CatchableExceptionOnRun".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CatchableExceptionOnRun".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CatchableExceptionOnRunMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CatchableExceptionOnRun>,
}
impl ::prost::Name for CatchableExceptionOnRunMsg {
    const NAME: &'static str = "CatchableExceptionOnRunMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CatchableExceptionOnRunMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CatchableExceptionOnRunMsg".into()
    }
}
/// W003
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InternalErrorOnRun {
    #[prost(string, tag = "1")]
    pub build_path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exc: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for InternalErrorOnRun {
    const NAME: &'static str = "InternalErrorOnRun";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InternalErrorOnRun".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InternalErrorOnRun".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InternalErrorOnRunMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<InternalErrorOnRun>,
}
impl ::prost::Name for InternalErrorOnRunMsg {
    const NAME: &'static str = "InternalErrorOnRunMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.InternalErrorOnRunMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.InternalErrorOnRunMsg".into()
    }
}
/// W004
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenericExceptionOnRun {
    #[prost(string, tag = "1")]
    pub build_path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub exc: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for GenericExceptionOnRun {
    const NAME: &'static str = "GenericExceptionOnRun";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GenericExceptionOnRun".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GenericExceptionOnRun".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenericExceptionOnRunMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<GenericExceptionOnRun>,
}
impl ::prost::Name for GenericExceptionOnRunMsg {
    const NAME: &'static str = "GenericExceptionOnRunMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.GenericExceptionOnRunMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.GenericExceptionOnRunMsg".into()
    }
}
/// W005
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NodeConnectionReleaseError {
    #[prost(string, tag = "1")]
    pub node_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub exc: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub exc_info: ::prost::alloc::string::String,
}
impl ::prost::Name for NodeConnectionReleaseError {
    const NAME: &'static str = "NodeConnectionReleaseError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeConnectionReleaseError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeConnectionReleaseError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeConnectionReleaseErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<NodeConnectionReleaseError>,
}
impl ::prost::Name for NodeConnectionReleaseErrorMsg {
    const NAME: &'static str = "NodeConnectionReleaseErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.NodeConnectionReleaseErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.NodeConnectionReleaseErrorMsg".into()
    }
}
/// W006
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FoundStats {
    #[prost(string, tag = "1")]
    pub stat_line: ::prost::alloc::string::String,
}
impl ::prost::Name for FoundStats {
    const NAME: &'static str = "FoundStats";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FoundStats".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FoundStats".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FoundStatsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<FoundStats>,
}
impl ::prost::Name for FoundStatsMsg {
    const NAME: &'static str = "FoundStatsMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FoundStatsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FoundStatsMsg".into()
    }
}
/// Z001
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MainKeyboardInterrupt {}
impl ::prost::Name for MainKeyboardInterrupt {
    const NAME: &'static str = "MainKeyboardInterrupt";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainKeyboardInterrupt".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainKeyboardInterrupt".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainKeyboardInterruptMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MainKeyboardInterrupt>,
}
impl ::prost::Name for MainKeyboardInterruptMsg {
    const NAME: &'static str = "MainKeyboardInterruptMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainKeyboardInterruptMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainKeyboardInterruptMsg".into()
    }
}
/// Z002
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MainEncounteredError {
    #[prost(string, tag = "1")]
    pub exc: ::prost::alloc::string::String,
}
impl ::prost::Name for MainEncounteredError {
    const NAME: &'static str = "MainEncounteredError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainEncounteredError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainEncounteredError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainEncounteredErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MainEncounteredError>,
}
impl ::prost::Name for MainEncounteredErrorMsg {
    const NAME: &'static str = "MainEncounteredErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainEncounteredErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainEncounteredErrorMsg".into()
    }
}
/// Z003
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MainStackTrace {
    #[prost(string, tag = "1")]
    pub stack_trace: ::prost::alloc::string::String,
}
impl ::prost::Name for MainStackTrace {
    const NAME: &'static str = "MainStackTrace";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainStackTrace".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainStackTrace".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainStackTraceMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MainStackTrace>,
}
impl ::prost::Name for MainStackTraceMsg {
    const NAME: &'static str = "MainStackTraceMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MainStackTraceMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MainStackTraceMsg".into()
    }
}
/// Z010
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimingInfoCollected {
    #[prost(message, optional, tag = "1")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(message, optional, tag = "2")]
    pub timing_info: ::core::option::Option<TimingInfoMsg>,
}
impl ::prost::Name for TimingInfoCollected {
    const NAME: &'static str = "TimingInfoCollected";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.TimingInfoCollected".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.TimingInfoCollected".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimingInfoCollectedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<TimingInfoCollected>,
}
impl ::prost::Name for TimingInfoCollectedMsg {
    const NAME: &'static str = "TimingInfoCollectedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.TimingInfoCollectedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.TimingInfoCollectedMsg".into()
    }
}
/// Z011
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LogDebugStackTrace {
    #[prost(string, tag = "1")]
    pub exc_info: ::prost::alloc::string::String,
}
impl ::prost::Name for LogDebugStackTrace {
    const NAME: &'static str = "LogDebugStackTrace";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogDebugStackTrace".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogDebugStackTrace".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogDebugStackTraceMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogDebugStackTrace>,
}
impl ::prost::Name for LogDebugStackTraceMsg {
    const NAME: &'static str = "LogDebugStackTraceMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogDebugStackTraceMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogDebugStackTraceMsg".into()
    }
}
/// Z012
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CheckCleanPath {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for CheckCleanPath {
    const NAME: &'static str = "CheckCleanPath";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CheckCleanPath".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CheckCleanPath".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckCleanPathMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CheckCleanPath>,
}
impl ::prost::Name for CheckCleanPathMsg {
    const NAME: &'static str = "CheckCleanPathMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CheckCleanPathMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CheckCleanPathMsg".into()
    }
}
/// Z013
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConfirmCleanPath {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for ConfirmCleanPath {
    const NAME: &'static str = "ConfirmCleanPath";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfirmCleanPath".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfirmCleanPath".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfirmCleanPathMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ConfirmCleanPath>,
}
impl ::prost::Name for ConfirmCleanPathMsg {
    const NAME: &'static str = "ConfirmCleanPathMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ConfirmCleanPathMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ConfirmCleanPathMsg".into()
    }
}
/// Z014
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProtectedCleanPath {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
impl ::prost::Name for ProtectedCleanPath {
    const NAME: &'static str = "ProtectedCleanPath";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProtectedCleanPath".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProtectedCleanPath".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProtectedCleanPathMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ProtectedCleanPath>,
}
impl ::prost::Name for ProtectedCleanPathMsg {
    const NAME: &'static str = "ProtectedCleanPathMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ProtectedCleanPathMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ProtectedCleanPathMsg".into()
    }
}
/// Z015
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FinishedCleanPaths {}
impl ::prost::Name for FinishedCleanPaths {
    const NAME: &'static str = "FinishedCleanPaths";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FinishedCleanPaths".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FinishedCleanPaths".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishedCleanPathsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<FinishedCleanPaths>,
}
impl ::prost::Name for FinishedCleanPathsMsg {
    const NAME: &'static str = "FinishedCleanPathsMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FinishedCleanPathsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FinishedCleanPathsMsg".into()
    }
}
/// Z016
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OpenCommand {
    #[prost(string, tag = "1")]
    pub open_cmd: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub profiles_dir: ::prost::alloc::string::String,
}
impl ::prost::Name for OpenCommand {
    const NAME: &'static str = "OpenCommand";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.OpenCommand".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.OpenCommand".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OpenCommandMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<OpenCommand>,
}
impl ::prost::Name for OpenCommandMsg {
    const NAME: &'static str = "OpenCommandMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.OpenCommandMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.OpenCommandMsg".into()
    }
}
/// Z018
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ServingDocsPort {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub port: i32,
}
impl ::prost::Name for ServingDocsPort {
    const NAME: &'static str = "ServingDocsPort";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ServingDocsPort".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ServingDocsPort".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServingDocsPortMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ServingDocsPort>,
}
impl ::prost::Name for ServingDocsPortMsg {
    const NAME: &'static str = "ServingDocsPortMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ServingDocsPortMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ServingDocsPortMsg".into()
    }
}
/// Z019
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ServingDocsAccessInfo {
    #[prost(string, tag = "1")]
    pub port: ::prost::alloc::string::String,
}
impl ::prost::Name for ServingDocsAccessInfo {
    const NAME: &'static str = "ServingDocsAccessInfo";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ServingDocsAccessInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ServingDocsAccessInfo".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServingDocsAccessInfoMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ServingDocsAccessInfo>,
}
impl ::prost::Name for ServingDocsAccessInfoMsg {
    const NAME: &'static str = "ServingDocsAccessInfoMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ServingDocsAccessInfoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ServingDocsAccessInfoMsg".into()
    }
}
/// Z020
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ServingDocsExitInfo {}
impl ::prost::Name for ServingDocsExitInfo {
    const NAME: &'static str = "ServingDocsExitInfo";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ServingDocsExitInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ServingDocsExitInfo".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServingDocsExitInfoMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ServingDocsExitInfo>,
}
impl ::prost::Name for ServingDocsExitInfoMsg {
    const NAME: &'static str = "ServingDocsExitInfoMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ServingDocsExitInfoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ServingDocsExitInfoMsg".into()
    }
}
/// Z021
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultWarning {
    #[prost(string, tag = "1")]
    pub resource_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub node_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(message, optional, tag = "5")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for RunResultWarning {
    const NAME: &'static str = "RunResultWarning";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultWarning".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultWarning".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultWarningMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RunResultWarning>,
}
impl ::prost::Name for RunResultWarningMsg {
    const NAME: &'static str = "RunResultWarningMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultWarningMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultWarningMsg".into()
    }
}
/// Z022
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultFailure {
    #[prost(string, tag = "1")]
    pub resource_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub node_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(message, optional, tag = "5")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for RunResultFailure {
    const NAME: &'static str = "RunResultFailure";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultFailure".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultFailure".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultFailureMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RunResultFailure>,
}
impl ::prost::Name for RunResultFailureMsg {
    const NAME: &'static str = "RunResultFailureMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultFailureMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultFailureMsg".into()
    }
}
/// Z023
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatsLine {
    #[prost(map = "string, int32", tag = "1")]
    pub stats: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
}
impl ::prost::Name for StatsLine {
    const NAME: &'static str = "StatsLine";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.StatsLine".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.StatsLine".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatsLineMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<StatsLine>,
}
impl ::prost::Name for StatsLineMsg {
    const NAME: &'static str = "StatsLineMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.StatsLineMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.StatsLineMsg".into()
    }
}
/// Z024
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultError {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub node_info: ::core::option::Option<NodeInfo>,
    #[prost(message, optional, tag = "3")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for RunResultError {
    const NAME: &'static str = "RunResultError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RunResultError>,
}
impl ::prost::Name for RunResultErrorMsg {
    const NAME: &'static str = "RunResultErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultErrorMsg".into()
    }
}
/// Z025
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultErrorNoMessage {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for RunResultErrorNoMessage {
    const NAME: &'static str = "RunResultErrorNoMessage";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultErrorNoMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultErrorNoMessage".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultErrorNoMessageMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RunResultErrorNoMessage>,
}
impl ::prost::Name for RunResultErrorNoMessageMsg {
    const NAME: &'static str = "RunResultErrorNoMessageMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultErrorNoMessageMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultErrorNoMessageMsg".into()
    }
}
/// Z026
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlCompiledPath {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for SqlCompiledPath {
    const NAME: &'static str = "SQLCompiledPath";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SQLCompiledPath".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SQLCompiledPath".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SqlCompiledPathMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SqlCompiledPath>,
}
impl ::prost::Name for SqlCompiledPathMsg {
    const NAME: &'static str = "SQLCompiledPathMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SQLCompiledPathMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SQLCompiledPathMsg".into()
    }
}
/// Z027
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckNodeTestFailure {
    #[prost(string, tag = "1")]
    pub relation_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for CheckNodeTestFailure {
    const NAME: &'static str = "CheckNodeTestFailure";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CheckNodeTestFailure".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CheckNodeTestFailure".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckNodeTestFailureMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<CheckNodeTestFailure>,
}
impl ::prost::Name for CheckNodeTestFailureMsg {
    const NAME: &'static str = "CheckNodeTestFailureMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.CheckNodeTestFailureMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.CheckNodeTestFailureMsg".into()
    }
}
/// Z030
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EndOfRunSummary {
    #[prost(int32, tag = "1")]
    pub num_errors: i32,
    #[prost(int32, tag = "2")]
    pub num_warnings: i32,
    #[prost(bool, tag = "3")]
    pub keyboard_interrupt: bool,
    #[prost(int32, tag = "4")]
    pub num_partial_success: i32,
}
impl ::prost::Name for EndOfRunSummary {
    const NAME: &'static str = "EndOfRunSummary";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EndOfRunSummary".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EndOfRunSummary".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndOfRunSummaryMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<EndOfRunSummary>,
}
impl ::prost::Name for EndOfRunSummaryMsg {
    const NAME: &'static str = "EndOfRunSummaryMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EndOfRunSummaryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EndOfRunSummaryMsg".into()
    }
}
/// Z033
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkSkippedChildren {
    #[prost(string, tag = "1")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub run_result: ::core::option::Option<RunResultMsg>,
}
impl ::prost::Name for MarkSkippedChildren {
    const NAME: &'static str = "MarkSkippedChildren";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MarkSkippedChildren".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MarkSkippedChildren".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkSkippedChildrenMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<MarkSkippedChildren>,
}
impl ::prost::Name for MarkSkippedChildrenMsg {
    const NAME: &'static str = "MarkSkippedChildrenMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.MarkSkippedChildrenMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.MarkSkippedChildrenMsg".into()
    }
}
/// Z034
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogSkipBecauseError {
    #[prost(string, tag = "1")]
    pub schema: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub relation: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub index: i32,
    #[prost(int32, tag = "4")]
    pub total: i32,
    #[prost(string, tag = "5")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub group: ::core::option::Option<Group>,
}
impl ::prost::Name for LogSkipBecauseError {
    const NAME: &'static str = "LogSkipBecauseError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogSkipBecauseError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogSkipBecauseError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogSkipBecauseErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<LogSkipBecauseError>,
}
impl ::prost::Name for LogSkipBecauseErrorMsg {
    const NAME: &'static str = "LogSkipBecauseErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.LogSkipBecauseErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.LogSkipBecauseErrorMsg".into()
    }
}
/// Z036
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EnsureGitInstalled {}
impl ::prost::Name for EnsureGitInstalled {
    const NAME: &'static str = "EnsureGitInstalled";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EnsureGitInstalled".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EnsureGitInstalled".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnsureGitInstalledMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<EnsureGitInstalled>,
}
impl ::prost::Name for EnsureGitInstalledMsg {
    const NAME: &'static str = "EnsureGitInstalledMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.EnsureGitInstalledMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.EnsureGitInstalledMsg".into()
    }
}
/// Z037
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsCreatingLocalSymlink {}
impl ::prost::Name for DepsCreatingLocalSymlink {
    const NAME: &'static str = "DepsCreatingLocalSymlink";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsCreatingLocalSymlink".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsCreatingLocalSymlink".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsCreatingLocalSymlinkMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsCreatingLocalSymlink>,
}
impl ::prost::Name for DepsCreatingLocalSymlinkMsg {
    const NAME: &'static str = "DepsCreatingLocalSymlinkMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsCreatingLocalSymlinkMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsCreatingLocalSymlinkMsg".into()
    }
}
/// Z038
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepsSymlinkNotAvailable {}
impl ::prost::Name for DepsSymlinkNotAvailable {
    const NAME: &'static str = "DepsSymlinkNotAvailable";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsSymlinkNotAvailable".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsSymlinkNotAvailable".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepsSymlinkNotAvailableMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DepsSymlinkNotAvailable>,
}
impl ::prost::Name for DepsSymlinkNotAvailableMsg {
    const NAME: &'static str = "DepsSymlinkNotAvailableMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DepsSymlinkNotAvailableMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DepsSymlinkNotAvailableMsg".into()
    }
}
/// Z039
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DisableTracking {}
impl ::prost::Name for DisableTracking {
    const NAME: &'static str = "DisableTracking";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DisableTracking".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DisableTracking".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisableTrackingMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DisableTracking>,
}
impl ::prost::Name for DisableTrackingMsg {
    const NAME: &'static str = "DisableTrackingMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DisableTrackingMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DisableTrackingMsg".into()
    }
}
/// Z040
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SendingEvent {
    #[prost(string, tag = "1")]
    pub kwargs: ::prost::alloc::string::String,
}
impl ::prost::Name for SendingEvent {
    const NAME: &'static str = "SendingEvent";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SendingEvent".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SendingEvent".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendingEventMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SendingEvent>,
}
impl ::prost::Name for SendingEventMsg {
    const NAME: &'static str = "SendingEventMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SendingEventMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SendingEventMsg".into()
    }
}
/// Z041
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SendEventFailure {}
impl ::prost::Name for SendEventFailure {
    const NAME: &'static str = "SendEventFailure";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SendEventFailure".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SendEventFailure".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendEventFailureMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<SendEventFailure>,
}
impl ::prost::Name for SendEventFailureMsg {
    const NAME: &'static str = "SendEventFailureMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.SendEventFailureMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.SendEventFailureMsg".into()
    }
}
/// Z042
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FlushEvents {}
impl ::prost::Name for FlushEvents {
    const NAME: &'static str = "FlushEvents";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FlushEvents".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FlushEvents".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlushEventsMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<FlushEvents>,
}
impl ::prost::Name for FlushEventsMsg {
    const NAME: &'static str = "FlushEventsMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FlushEventsMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FlushEventsMsg".into()
    }
}
/// Z043
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FlushEventsFailure {}
impl ::prost::Name for FlushEventsFailure {
    const NAME: &'static str = "FlushEventsFailure";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FlushEventsFailure".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FlushEventsFailure".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlushEventsFailureMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<FlushEventsFailure>,
}
impl ::prost::Name for FlushEventsFailureMsg {
    const NAME: &'static str = "FlushEventsFailureMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.FlushEventsFailureMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.FlushEventsFailureMsg".into()
    }
}
/// Z044
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TrackingInitializeFailure {
    #[prost(string, tag = "1")]
    pub exc_info: ::prost::alloc::string::String,
}
impl ::prost::Name for TrackingInitializeFailure {
    const NAME: &'static str = "TrackingInitializeFailure";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.TrackingInitializeFailure".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.TrackingInitializeFailure".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrackingInitializeFailureMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<TrackingInitializeFailure>,
}
impl ::prost::Name for TrackingInitializeFailureMsg {
    const NAME: &'static str = "TrackingInitializeFailureMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.TrackingInitializeFailureMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.TrackingInitializeFailureMsg".into()
    }
}
/// Z046
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultWarningMessage {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
impl ::prost::Name for RunResultWarningMessage {
    const NAME: &'static str = "RunResultWarningMessage";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultWarningMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultWarningMessage".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunResultWarningMessageMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<RunResultWarningMessage>,
}
impl ::prost::Name for RunResultWarningMessageMsg {
    const NAME: &'static str = "RunResultWarningMessageMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.RunResultWarningMessageMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.RunResultWarningMessageMsg".into()
    }
}
/// Z047
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DebugCmdOut {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for DebugCmdOut {
    const NAME: &'static str = "DebugCmdOut";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DebugCmdOut".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DebugCmdOut".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DebugCmdOutMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DebugCmdOut>,
}
impl ::prost::Name for DebugCmdOutMsg {
    const NAME: &'static str = "DebugCmdOutMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DebugCmdOutMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DebugCmdOutMsg".into()
    }
}
/// Z048
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DebugCmdResult {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for DebugCmdResult {
    const NAME: &'static str = "DebugCmdResult";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DebugCmdResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DebugCmdResult".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DebugCmdResultMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<DebugCmdResult>,
}
impl ::prost::Name for DebugCmdResultMsg {
    const NAME: &'static str = "DebugCmdResultMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.DebugCmdResultMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.DebugCmdResultMsg".into()
    }
}
/// Z049
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListCmdOut {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for ListCmdOut {
    const NAME: &'static str = "ListCmdOut";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ListCmdOut".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ListCmdOut".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCmdOutMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ListCmdOut>,
}
impl ::prost::Name for ListCmdOutMsg {
    const NAME: &'static str = "ListCmdOutMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ListCmdOutMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ListCmdOutMsg".into()
    }
}
/// Z051
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceReport {
    #[prost(string, tag = "2")]
    pub command_name: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub command_success: bool,
    #[prost(float, tag = "4")]
    pub command_wall_clock_time: f32,
    /// The process_* metrics reflect the resource consumption of the process as
    /// a whole when the command completes. When dbt is being used as a library,
    /// these will reflect the resource consumption of the host process as a whole,
    /// rather than the resources used exclusively by the command.
    #[prost(float, tag = "5")]
    pub process_user_time: f32,
    #[prost(float, tag = "6")]
    pub process_kernel_time: f32,
    #[prost(int64, tag = "7")]
    pub process_mem_max_rss: i64,
    #[prost(int64, tag = "8")]
    pub process_in_blocks: i64,
    #[prost(int64, tag = "9")]
    pub process_out_blocks: i64,
}
impl ::prost::Name for ResourceReport {
    const NAME: &'static str = "ResourceReport";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ResourceReport".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ResourceReport".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceReportMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ResourceReport>,
}
impl ::prost::Name for ResourceReportMsg {
    const NAME: &'static str = "ResourceReportMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ResourceReportMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ResourceReportMsg".into()
    }
}
/// Z052
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObservabilityMetric {
    #[prost(string, tag = "1")]
    pub label: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub value: f32,
    #[prost(string, repeated, tag = "3")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub debug_message: ::prost::alloc::string::String,
}
impl ::prost::Name for ObservabilityMetric {
    const NAME: &'static str = "ObservabilityMetric";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ObservabilityMetric".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ObservabilityMetric".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ObservabilityMetricMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ObservabilityMetric>,
}
impl ::prost::Name for ObservabilityMetricMsg {
    const NAME: &'static str = "ObservabilityMetricMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ObservabilityMetricMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ObservabilityMetricMsg".into()
    }
}
/// Z061
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ArtifactUploadError {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for ArtifactUploadError {
    const NAME: &'static str = "ArtifactUploadError";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArtifactUploadError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArtifactUploadError".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArtifactUploadErrorMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ArtifactUploadError>,
}
impl ::prost::Name for ArtifactUploadErrorMsg {
    const NAME: &'static str = "ArtifactUploadErrorMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArtifactUploadErrorMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArtifactUploadErrorMsg".into()
    }
}
/// Z062
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ArtifactUploadSuccess {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for ArtifactUploadSuccess {
    const NAME: &'static str = "ArtifactUploadSuccess";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArtifactUploadSuccess".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArtifactUploadSuccess".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArtifactUploadSuccessMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ArtifactUploadSuccess>,
}
impl ::prost::Name for ArtifactUploadSuccessMsg {
    const NAME: &'static str = "ArtifactUploadSuccessMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArtifactUploadSuccessMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArtifactUploadSuccessMsg".into()
    }
}
/// Z063
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ArtifactUploadSkipped {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for ArtifactUploadSkipped {
    const NAME: &'static str = "ArtifactUploadSkipped";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArtifactUploadSkipped".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArtifactUploadSkipped".into()
    }
}
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(default)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArtifactUploadSkippedMsg {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<CoreEventInfo>,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<ArtifactUploadSkipped>,
}
impl ::prost::Name for ArtifactUploadSkippedMsg {
    const NAME: &'static str = "ArtifactUploadSkippedMsg";
    const PACKAGE: &'static str = "v1.public.fields.core_types";
    fn full_name() -> ::prost::alloc::string::String {
        "v1.public.fields.core_types.ArtifactUploadSkippedMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/v1.public.fields.core_types.ArtifactUploadSkippedMsg".into()
    }
}
