syntax = "proto3";

package v1.events.vortex;

option go_package = "github.com/dbt-labs/proto-golang/v1/events/vortex";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "dbtlabs/proto/public/v1/common/vortex_options.proto";


message VortexMessage {
    // this can encapsulate any known protobuf message type.
    //
    // https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/any.proto
    google.protobuf.Any any = 1;

    // the time that the event was created by the client. this could
    // be different than the time that the event was sent to vortex,
    // since the client may buffer events before sending them.
    google.protobuf.Timestamp vortex_event_created_at = 2;

    // the time that the client sent the message to vortex (recorded
    // by the vortex client library automatically).
    google.protobuf.Timestamp vortex_client_sent_at = 3;

    // the time that the vortex api received the message.
    google.protobuf.Timestamp vortex_backend_received_at = 4;

    // the time that the vortex backend fully processed the message.
    google.protobuf.Timestamp vortex_backend_processed_at = 5;
}


// internal canonical message for vortex events. this is what
// you receive when you integrate a streaming consumer with vortex.
// it is also what vortex uses internally on its queue.
message VortexMessageBatch {
    // a UUID which is a unique identifier for the event, it can be
    // provided by the client or autogenerated by the vortex  client
    // library.
    string request_id = 1;

    // the data that was sent to vortex originally. it is retained
    // here so that consumers can re-construct the original message
    // exactly as they sent it. clients will construct this from
    // a valid protobuf message.
    //
    // each batch can contain many different message types. this
    // will be hidden away from streaming consumers, who will instead
    // see the exact protobufs requested come through in their
    // subscription.
    repeated VortexMessage payload = 2;
}

// a message that is sent to the dead letter queue when a message
// is rejected by vortex.
message VortexDeadLetterMessage {
    option (v1.public.common.vortex_namespace) = VORTEX_ICEBERG_NAMESPACE_DLQ;
    option (v1.public.common.vortex_enabled) = true;

    // type url of failed message
    string type_url = 1;

    // a best effort attempt at serializing the rejected message.
    string value = 2;

    // original bytes of failed message (for reconstructing or replaying events).
    bytes value_bytes = 3;

    // the reason that the message was rejected.
    string reason = 4;
}

// Base enriched event data that all telemetry events inherit from
// Should be explicitly defined as a field "enrichment"
message VortexMessageEnrichment {
  // IP address and proxy information of the client
  VortexClientIp client_ip = 1;

  // Information about the client platform, including service, client, and library versions
  VortexClientPlatform client_platform = 2;

  // User agent information for web-based events
  VortexUserAgent user_agent = 3;
}

message VortexClientIp {
  // The IP address of the client
  string ip = 1;

  // Whether the IP address is from a proxy service
  bool proxy = 2;

  // Geographic location information for this IP address
  VortexGeolocation geo = 3;
}

message VortexGeolocation {
  // Two-letter country code (ISO 3166-1 alpha-2)
  string country = 1;

  // Name of the city
  string city = 2;

  // Latitude coordinate
  double latitude = 3;

  // Longitude coordinate
  double longitude = 4;

  // Timezone identifier (e.g., "America/New_York")
  string timezone = 5;

  // Name of the continent
  string continent = 6;
}

// Client platform info that every vortex client will set via X-Vortex-Client-Platform
// Expected format is "dbt-core/1.7.0 dbt-vortex-python/1.0.0 dbtlabs-proto/4.25.1"
// See https://github.com/dbt-labs/vortex/pull/101 for more context
message VortexClientPlatform {
  // Full header value as received
  string raw = 1;

  // Source service of the vortex client (i.e. dbt-core)
  string service = 2;

  // Version of the source service
  string service_version = 3;

  // Vortex client used (i.e. vortex-client-rust)
  string client = 4;

  // Version of the vortex client
  string client_version = 5;

  // Name of the dbt proto library used
  string dbt_proto_library = 6;

  // Version of the dbt proto library
  string dbt_proto_library_version = 7;
}

// For web based events that send the User-Agent header
message VortexUserAgent {
  // Raw User-Agent string as received from the client
  string raw = 1;

  // Name of the browser (e.g., "Chrome", "Firefox")
  string browser = 2;

  // Version of the browser
  string browser_version = 3;

  // Operating system name (e.g., "Windows", "macOS")
  string os = 4;

  // Operating system version
  string os_version = 5;

  // Device model or identifier
  string device = 6;

  // Type of device (e.g., "mobile", "desktop", "tablet")
  string device_type = 7;
}
