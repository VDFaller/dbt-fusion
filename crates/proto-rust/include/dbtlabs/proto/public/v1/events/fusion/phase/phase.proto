syntax = "proto3";
package v1.public.events.fusion.phase;

option go_package = "github.com/dbt-labs/proto-golang/v1/public/events/fusion/phase";

// A superset of all possible phases across all dbt commands.
// Note that not all phases are relevant to all commands.
enum ExecutionPhase {
  // Do not use.
  EXECUTION_PHASE_UNSPECIFIED = 0;

  /* Build/run flow phases */

  // Cleaning output folders (e.g. the target directory)
  EXECUTION_PHASE_CLEAN = 10;

  // dbt Project loading: analyzing dbt_project, profiles.yml and scanning files
  EXECUTION_PHASE_LOAD_PROJECT = 20;

  // Parsing and macro name resolution of all dbt files
  EXECUTION_PHASE_PARSE = 30;

  // Schedule nodes based on selection criteria and dependencies.
  EXECUTION_PHASE_SCHEDULE = 40;

  // Initializing the adapter (warehouse connection and configuration)
  EXECUTION_PHASE_INIT_ADAPTER = 50;

  // Handling deferral. Fetching state source schemas from remote, hydrating relation, and schema cache
  EXECUTION_PHASE_DEFER_HYDRATION = 60;

  // Building the task graph from the schedule
  EXECUTION_PHASE_TASK_GRAPH_BUILD = 70;

  // Hydration of cached models, seeds, snapshots and sources
  EXECUTION_PHASE_NODE_CACHE_HYDRATION = 80;

  // Render SQL (also called `compile` in dbt core)
  EXECUTION_PHASE_RENDER = 90;

  // SQL static analysis
  EXECUTION_PHASE_ANALYZE = 100;

  // Execution against the target database
  EXECUTION_PHASE_RUN = 110;

  /* Phases for other commands */

  // Freshness analysis of sources and models
  EXECUTION_PHASE_FRESHNESS_ANALYSIS = 120;

  // Analysis of individual node lineages
  EXECUTION_PHASE_LINEAGE = 130;

  // Debugging connection correctness and availability to the warehouse
  EXECUTION_PHASE_DEBUG = 140;
}

// Top-level event for reporting a build phase, with optional details.
message PhaseExecuted {
  // The current phase of execution.
  ExecutionPhase phase = 1;

  // Optional count of total individual nodes within the phase (when applicable).
  optional uint64 node_count_total = 2;

  // Optional count of skipped nodes within the phase (when applicable).
  // Skipped means `node_outcome` was set to `NODE_OUTCOME_SKIPPED`.
  optional uint64 node_count_skipped = 3;

  // Optional count of errored nodes within the phase (when applicable).
  // Error means `node_outcome` was set to `NODE_OUTCOME_ERROR`.
  optional uint64 node_count_error = 4;
}
